# Generated for overhead models

from django.db import migrations, models
import django.db.models.deletion
import uuid
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('payroll', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='OverheadCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nombre de categoría')),
                ('description', models.TextField(blank=True, verbose_name='Descripción')),
                ('calculation_method', models.CharField(choices=[('percentage', 'Porcentaje del salario'), ('fixed', 'Monto fijo'), ('formula', 'Fórmula personalizada'), ('ml_predicted', 'Predicción ML')], default='percentage', max_length=50, verbose_name='Método de cálculo')),
                ('default_rate', models.DecimalField(decimal_places=4, default=0.0, max_digits=8, verbose_name='Tasa por defecto')),
                ('min_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Monto mínimo')),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Monto máximo')),
                ('formula', models.TextField(blank=True, verbose_name='Fórmula personalizada')),
                ('aura_category', models.CharField(choices=[('infrastructure', 'Infraestructura'), ('administrative', 'Administrativo'), ('benefits', 'Beneficios'), ('training', 'Capacitación'), ('technology', 'Tecnología'), ('social_impact', 'Impacto Social'), ('sustainability', 'Sustentabilidad'), ('wellbeing', 'Bienestar'), ('innovation', 'Innovación')], default='administrative', max_length=50, verbose_name='Categoría AURA')),
                ('ml_enabled', models.BooleanField(default=True, verbose_name='ML habilitado')),
                ('ml_weight', models.DecimalField(decimal_places=2, default=1.0, max_digits=3, verbose_name='Peso ML')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overhead_categories', to='payroll.payrollcompany')),
            ],
            options={
                'verbose_name': 'Categoría de Overhead',
                'verbose_name_plural': 'Categorías de Overhead',
                'db_table': 'payroll_overhead_category',
            },
        ),
        migrations.CreateModel(
            name='OverheadBenchmark',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('industry', models.CharField(max_length=100, verbose_name='Industria')),
                ('region', models.CharField(max_length=100, verbose_name='Región')),
                ('company_size_range', models.CharField(choices=[('1-10', '1-10 empleados'), ('11-50', '11-50 empleados'), ('51-200', '51-200 empleados'), ('201-500', '201-500 empleados'), ('501-1000', '501-1000 empleados'), ('1000+', '1000+ empleados')], max_length=20, verbose_name='Rango tamaño empresa')),
                ('infrastructure_benchmark', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Benchmark infraestructura (%)')),
                ('administrative_benchmark', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Benchmark administrativo (%)')),
                ('benefits_benchmark', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Benchmark beneficios (%)')),
                ('training_benchmark', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Benchmark capacitación (%)')),
                ('technology_benchmark', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Benchmark tecnología (%)')),
                ('social_impact_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark impacto social (%)')),
                ('sustainability_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark sustentabilidad (%)')),
                ('wellbeing_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark bienestar (%)')),
                ('innovation_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark innovación (%)')),
                ('total_overhead_benchmark', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Benchmark overhead total (%)')),
                ('aura_enhanced_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark AURA (%)')),
                ('percentile_25', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentil 25')),
                ('percentile_50', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentil 50')),
                ('percentile_75', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentil 75')),
                ('percentile_90', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentil 90')),
                ('data_source', models.CharField(default='market_research', max_length=100, verbose_name='Fuente de datos')),
                ('sample_size', models.IntegerField(default=0, verbose_name='Tamaño muestra')),
                ('confidence_level', models.DecimalField(decimal_places=2, default=95.0, max_digits=5, verbose_name='Nivel confianza (%)')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Benchmark Overhead',
                'verbose_name_plural': 'Benchmarks Overhead',
                'db_table': 'payroll_overhead_benchmark',
            },
        ),
        migrations.CreateModel(
            name='OverheadMLModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('model_name', models.CharField(max_length=100, verbose_name='Nombre del modelo')),
                ('model_type', models.CharField(choices=[('random_forest', 'Random Forest'), ('neural_network', 'Neural Network'), ('gradient_boosting', 'Gradient Boosting'), ('lstm', 'LSTM'), ('transformer', 'Transformer'), ('hybrid_ml_aura', 'Híbrido ML + AURA'), ('aura_enhanced', 'AURA Enhanced')], default='hybrid_ml_aura', max_length=30, verbose_name='Tipo de modelo')),
                ('accuracy', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Precisión (%)')),
                ('precision', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Precisión (%)')),
                ('recall', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Recall (%)')),
                ('f1_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='F1 Score')),
                ('mse', models.DecimalField(decimal_places=4, default=0, max_digits=10, verbose_name='Mean Squared Error')),
                ('aura_ethics_compliance', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Cumplimiento ética AURA')),
                ('aura_fairness_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score equidad AURA')),
                ('aura_bias_detection', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Detección sesgos AURA')),
                ('training_data_size', models.IntegerField(default=0, verbose_name='Tamaño datos entrenamiento')),
                ('validation_data_size', models.IntegerField(default=0, verbose_name='Tamaño datos validación')),
                ('test_data_size', models.IntegerField(default=0, verbose_name='Tamaño datos prueba')),
                ('model_parameters', models.JSONField(default=dict, verbose_name='Parámetros del modelo')),
                ('feature_importance', models.JSONField(default=dict, verbose_name='Importancia características')),
                ('aura_weights', models.JSONField(default=dict, verbose_name='Pesos AURA')),
                ('last_training_date', models.DateTimeField(blank=True, null=True, verbose_name='Última fecha entrenamiento')),
                ('next_training_date', models.DateTimeField(blank=True, null=True, verbose_name='Próxima fecha entrenamiento')),
                ('training_frequency_days', models.IntegerField(default=30, verbose_name='Frecuencia entrenamiento (días)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Modelo activo')),
                ('is_production', models.BooleanField(default=False, verbose_name='En producción')),
                ('version', models.CharField(default='1.0.0', max_length=20, verbose_name='Versión')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overhead_ml_models', to='payroll.payrollcompany')),
            ],
            options={
                'verbose_name': 'Modelo ML Overhead',
                'verbose_name_plural': 'Modelos ML Overhead',
                'db_table': 'payroll_overhead_ml_model',
            },
        ),
        migrations.CreateModel(
            name='TeamOverheadAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('team_name', models.CharField(max_length=100, verbose_name='Nombre del equipo')),
                ('department', models.CharField(max_length=100, verbose_name='Departamento')),
                ('team_size', models.IntegerField(verbose_name='Tamaño del equipo')),
                ('total_salaries', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Total salarios')),
                ('total_overhead', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Total overhead')),
                ('overhead_per_employee', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Overhead por empleado')),
                ('team_ethics_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score ética equipo')),
                ('team_diversity_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score diversidad')),
                ('team_sustainability_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score sustentabilidad')),
                ('team_innovation_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score innovación')),
                ('ml_efficiency_prediction', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Predicción eficiencia ML')),
                ('ml_turnover_risk', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Riesgo rotación ML')),
                ('ml_performance_forecast', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Pronóstico desempeño ML')),
                ('ml_cost_optimization', models.JSONField(default=dict, verbose_name='Optimización costos ML')),
                ('efficiency_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score eficiencia')),
                ('industry_percentile', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Percentil industria')),
                ('company_ranking', models.IntegerField(default=0, verbose_name='Ranking en empresa')),
                ('aura_holistic_assessment', models.JSONField(default=dict, verbose_name='Evaluación holística AURA')),
                ('aura_energy_analysis', models.JSONField(default=dict, verbose_name='Análisis energético AURA')),
                ('aura_compatibility_matrix', models.JSONField(default=dict, verbose_name='Matriz compatibilidad AURA')),
                ('aura_growth_recommendations', models.JSONField(default=dict, verbose_name='Recomendaciones crecimiento AURA')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_analyses', to='payroll.payrollcompany')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_analyses', to='payroll.payrollperiod')),
                ('team_lead', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payroll.payrollemployee', verbose_name='Líder del equipo')),
            ],
            options={
                'verbose_name': 'Análisis Overhead Equipo',
                'verbose_name_plural': 'Análisis Overhead Equipos',
                'db_table': 'payroll_team_overhead_analysis',
            },
        ),
        migrations.CreateModel(
            name='EmployeeOverheadCalculation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('infrastructure_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo infraestructura')),
                ('administrative_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo administrativo')),
                ('benefits_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo beneficios')),
                ('training_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo capacitación')),
                ('technology_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo tecnología')),
                ('social_impact_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo impacto social')),
                ('sustainability_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo sustentabilidad')),
                ('wellbeing_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo bienestar')),
                ('innovation_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo innovación')),
                ('traditional_overhead', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Overhead tradicional')),
                ('aura_enhanced_overhead', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Overhead mejorado AURA')),
                ('total_overhead', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Overhead total')),
                ('overhead_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Porcentaje overhead')),
                ('ml_predicted_overhead', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Overhead predicho ML')),
                ('ml_confidence_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score confianza ML')),
                ('ml_optimization_potential', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Potencial optimización ML')),
                ('ml_recommendations', models.JSONField(default=dict, verbose_name='Recomendaciones ML')),
                ('aura_ethics_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score ética AURA')),
                ('aura_fairness_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score equidad AURA')),
                ('aura_sustainability_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score sustentabilidad AURA')),
                ('aura_insights', models.JSONField(default=dict, verbose_name='Insights AURA')),
                ('industry_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark industria')),
                ('company_size_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark tamaño empresa')),
                ('regional_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark regional')),
                ('calculation_version', models.CharField(default='2.0', max_length=20, verbose_name='Versión cálculo')),
                ('calculated_at', models.DateTimeField(auto_now_add=True, verbose_name='Calculado en')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overhead_calculations', to='payroll.payrollemployee')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overhead_calculations', to='payroll.payrollperiod')),
            ],
            options={
                'verbose_name': 'Cálculo Overhead Empleado',
                'verbose_name_plural': 'Cálculos Overhead Empleados',
                'db_table': 'payroll_employee_overhead',
            },
        ),
        migrations.AddIndex(
            model_name='teamoverheadanalysis',
            index=models.Index(fields=['company', 'period'], name='payroll_te_company_a4c2cc_idx'),
        ),
        migrations.AddIndex(
            model_name='teamoverheadanalysis',
            index=models.Index(fields=['department'], name='payroll_te_departm_8825fc_idx'),
        ),
        migrations.AddIndex(
            model_name='teamoverheadanalysis',
            index=models.Index(fields=['efficiency_score'], name='payroll_te_efficie_8b0568_idx'),
        ),
        migrations.AddIndex(
            model_name='teamoverheadanalysis',
            index=models.Index(fields=['team_ethics_score'], name='payroll_te_team_et_5ce6a3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teamoverheadanalysis',
            unique_together={('company', 'team_name', 'period')},
        ),
        migrations.AddIndex(
            model_name='overheadmlmodel',
            index=models.Index(fields=['company', 'is_active'], name='payroll_ov_company_81c6ad_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadmlmodel',
            index=models.Index(fields=['model_type'], name='payroll_ov_model_t_f99fb9_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadmlmodel',
            index=models.Index(fields=['accuracy'], name='payroll_ov_accurac_eb2b4a_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadmlmodel',
            index=models.Index(fields=['is_production'], name='payroll_ov_is_prod_6b8336_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadcategory',
            index=models.Index(fields=['company', 'is_active'], name='payroll_ov_company_c8bdf6_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadcategory',
            index=models.Index(fields=['aura_category'], name='payroll_ov_aura_ca_f86ced_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadcategory',
            index=models.Index(fields=['ml_enabled'], name='payroll_ov_ml_enab_b993e7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='overheadcategory',
            unique_together={('company', 'name')},
        ),
        migrations.AddIndex(
            model_name='overheadbenchmark',
            index=models.Index(fields=['industry'], name='payroll_ov_industr_43cec3_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadbenchmark',
            index=models.Index(fields=['region'], name='payroll_ov_region_c6e632_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadbenchmark',
            index=models.Index(fields=['company_size_range'], name='payroll_ov_company_78d78f_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadbenchmark',
            index=models.Index(fields=['total_overhead_benchmark'], name='payroll_ov_total_o_14b09b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='overheadbenchmark',
            unique_together={('industry', 'region', 'company_size_range')},
        ),
        migrations.AddIndex(
            model_name='employeeoverheadcalculation',
            index=models.Index(fields=['employee', 'period'], name='payroll_em_employe_0d0fbd_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeoverheadcalculation',
            index=models.Index(fields=['ml_confidence_score'], name='payroll_em_ml_conf_e0d6e0_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeoverheadcalculation',
            index=models.Index(fields=['aura_ethics_score'], name='payroll_em_aura_et_56a1a4_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeoverheadcalculation',
            index=models.Index(fields=['calculated_at'], name='payroll_em_calcula_b6da00_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='employeeoverheadcalculation',
            unique_together={('employee', 'period')},
        ),
    ]