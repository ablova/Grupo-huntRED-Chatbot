# Generated by Django 4.2.23 on 2025-07-16 17:05

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('app', '0001_add_new_payroll_features'),
    ]

    operations = [
        migrations.CreateModel(
            name='PayrollCompany',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Nombre de la empresa')),
                ('whatsapp_webhook_token', models.CharField(max_length=255, unique=True, verbose_name='Token webhook WhatsApp')),
                ('whatsapp_phone_number', models.CharField(max_length=20, verbose_name='Número WhatsApp')),
                ('whatsapp_business_name', models.CharField(max_length=100, verbose_name='Nombre del negocio WhatsApp')),
                ('country_code', models.CharField(default='MEX', max_length=3, verbose_name='Código de país')),
                ('currency', models.CharField(default='MXN', max_length=3, verbose_name='Moneda')),
                ('payroll_frequency', models.CharField(choices=[('weekly', 'Semanal'), ('biweekly', 'Quincenal'), ('monthly', 'Mensual'), ('bimonthly', 'Bimestral')], default='monthly', max_length=20)),
                ('pricing_tier', models.CharField(default='starter', max_length=20, verbose_name='Tier de precios')),
                ('price_per_employee', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Precio por empleado')),
                ('premium_services', models.JSONField(default=dict, verbose_name='Servicios premium')),
                ('messaging_config', models.JSONField(default=dict, verbose_name='Configuración de mensajería')),
                ('ats_integration_enabled', models.BooleanField(default=True, verbose_name='Integración ATS activa')),
                ('ats_company_id', models.UUIDField(blank=True, null=True, verbose_name='ID empresa en ATS')),
                ('ats_sync_enabled', models.BooleanField(default=True, verbose_name='Sincronización ATS activa')),
                ('ml_attendance_mode', models.CharField(choices=[('precise', 'Preciso y Sistemático'), ('ml_learning', 'ML con Aprendizaje'), ('random_ml', 'Aleatorio con ML'), ('hybrid', 'Híbrido (Preciso + ML)')], default='hybrid', max_length=20, verbose_name='Modo de Asistencia ML')),
                ('ml_accuracy_threshold', models.DecimalField(decimal_places=2, default=85.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Umbral de Precisión ML (%)')),
                ('ml_learning_enabled', models.BooleanField(default=True, verbose_name='Aprendizaje ML activo')),
                ('ml_training_data_days', models.IntegerField(default=90, verbose_name='Días de datos de entrenamiento')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.businessunit', verbose_name='Unidad de negocio')),
            ],
            options={
                'verbose_name': 'Empresa de Nómina',
                'verbose_name_plural': 'Empresas de Nómina',
                'db_table': 'payroll_company',
            },
        ),
        migrations.CreateModel(
            name='PayrollEmployee',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('employee_number', models.CharField(max_length=50, unique=True, verbose_name='Número de empleado')),
                ('first_name', models.CharField(max_length=100, verbose_name='Nombre')),
                ('last_name', models.CharField(max_length=100, verbose_name='Apellido')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Teléfono')),
                ('whatsapp_number', models.CharField(blank=True, max_length=20, verbose_name='WhatsApp')),
                ('hire_date', models.DateField(verbose_name='Fecha de contratación')),
                ('job_title', models.CharField(max_length=100, verbose_name='Puesto')),
                ('department', models.CharField(max_length=100, verbose_name='Departamento')),
                ('employee_type', models.CharField(choices=[('permanent', 'Permanente'), ('temporary', 'Temporal'), ('contractor', 'Contratista'), ('intern', 'Interno')], default='permanent', max_length=20)),
                ('monthly_salary', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Salario mensual')),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Tarifa por hora')),
                ('bank_name', models.CharField(blank=True, max_length=100, verbose_name='Banco')),
                ('account_number', models.CharField(blank=True, max_length=50, verbose_name='Número de cuenta')),
                ('clabe', models.CharField(blank=True, max_length=18, verbose_name='CLABE')),
                ('rfc', models.CharField(blank=True, max_length=13, verbose_name='RFC')),
                ('curp', models.CharField(blank=True, max_length=18, verbose_name='CURP')),
                ('nss', models.CharField(blank=True, max_length=11, verbose_name='NSS')),
                ('office_location', models.JSONField(default=dict, verbose_name='Ubicación de oficina')),
                ('working_hours', models.JSONField(default=dict, verbose_name='Horario de trabajo')),
                ('ats_candidate_id', models.UUIDField(blank=True, null=True, verbose_name='ID candidato en ATS')),
                ('ats_job_id', models.UUIDField(blank=True, null=True, verbose_name='ID trabajo en ATS')),
                ('career_profile', models.JSONField(default=dict, verbose_name='Perfil de carrera profesional')),
                ('skills_assessment', models.JSONField(default=dict, verbose_name='Evaluación de habilidades')),
                ('performance_history', models.JSONField(default=dict, verbose_name='Historial de desempeño')),
                ('attendance_pattern', models.JSONField(default=dict, verbose_name='Patrón de asistencia ML')),
                ('ml_confidence_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de confianza ML')),
                ('attendance_anomalies', models.JSONField(default=list, verbose_name='Anomalías de asistencia')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='payroll.payrollcompany', verbose_name='Empresa')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payroll.payrollemployee', verbose_name='Supervisor')),
            ],
            options={
                'verbose_name': 'Empleado',
                'verbose_name_plural': 'Empleados',
                'db_table': 'payroll_employee',
            },
        ),
        migrations.CreateModel(
            name='PayrollPeriod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('period_name', models.CharField(max_length=100, verbose_name='Nombre del período')),
                ('start_date', models.DateField(verbose_name='Fecha de inicio')),
                ('end_date', models.DateField(verbose_name='Fecha de fin')),
                ('frequency', models.CharField(choices=[('weekly', 'Semanal'), ('biweekly', 'Quincenal'), ('monthly', 'Mensual'), ('bimonthly', 'Bimestral')], max_length=20, verbose_name='Frecuencia')),
                ('status', models.CharField(choices=[('draft', 'Borrador'), ('calculated', 'Calculada'), ('approved', 'Aprobada'), ('disbursed', 'Dispersada'), ('cancelled', 'Cancelada')], default='draft', max_length=20, verbose_name='Estado')),
                ('total_employees', models.IntegerField(default=0, verbose_name='Total empleados')),
                ('total_gross', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Total bruto')),
                ('total_net', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Total neto')),
                ('total_taxes', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Total impuestos')),
                ('calculation_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de cálculo')),
                ('approval_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de aprobación')),
                ('disbursement_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de dispersión')),
                ('ml_analysis', models.JSONField(default=dict, verbose_name='Análisis ML del período')),
                ('attendance_accuracy', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Precisión de asistencia (%)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Aprobado por')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payroll_periods', to='payroll.payrollcompany', verbose_name='Empresa')),
            ],
            options={
                'verbose_name': 'Período de Nómina',
                'verbose_name_plural': 'Períodos de Nómina',
                'db_table': 'payroll_period',
            },
        ),
        migrations.CreateModel(
            name='UMARegistry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_code', models.CharField(choices=[('MEX', 'México')], max_length=3)),
                ('year', models.IntegerField()),
                ('uma_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('effective_date', models.DateField()),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('source', models.CharField(default='DOF', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'payroll_uma_registry',
                'indexes': [models.Index(fields=['country_code', 'is_active'], name='payroll_uma_country_idx'), models.Index(fields=['year'], name='payroll_uma_year_idx')],
                'unique_together': {('country_code', 'year')},
            },
        ),
        migrations.CreateModel(
            name='TaxUpdateLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update_type', models.CharField(choices=[('uma', 'UMA'), ('imss', 'IMSS'), ('infonavit', 'INFONAVIT'), ('sat', 'SAT'), ('col_pensiones', 'Colombia Pensiones'), ('col_salud', 'Colombia Salud'), ('arg_anses', 'Argentina ANSES'), ('arg_afip', 'Argentina AFIP')], max_length=20)),
                ('country_code', models.CharField(choices=[('MEX', 'México')], max_length=3)),
                ('description', models.TextField()),
                ('old_values', models.JSONField(blank=True, null=True)),
                ('new_values', models.JSONField(blank=True, null=True)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('source', models.CharField(default='celery', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'payroll_tax_update_log',
                'indexes': [models.Index(fields=['update_type', 'country_code'], name='payroll_tax_upd_type_idx'), models.Index(fields=['created_at'], name='payroll_tax_upd_created_idx'), models.Index(fields=['success'], name='payroll_tax_upd_success_idx')],
            },
        ),
        migrations.CreateModel(
            name='TaxTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table_type', models.CharField(choices=[('sat_isr_mensual', 'SAT ISR Mensual'), ('sat_isr_anual', 'SAT ISR Anual'), ('sat_subsidios', 'SAT Subsidios'), ('imss_cuotas', 'IMSS Cuotas'), ('imss_riesgos', 'IMSS Riesgos de Trabajo'), ('imss_retiro', 'IMSS Retiro'), ('infonavit_creditos', 'INFONAVIT Créditos'), ('infonavit_descuentos', 'INFONAVIT Descuentos'), ('col_pensiones', 'Colombia Pensiones'), ('col_salud', 'Colombia Salud'), ('arg_anses', 'Argentina ANSES'), ('arg_afip', 'Argentina AFIP')], max_length=50)),
                ('concept', models.CharField(max_length=100)),
                ('limit_inferior', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('limit_superior', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('fixed_quota', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('percentage', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('effective_date', models.DateField()),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('source', models.CharField(default='manual', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'payroll_tax_tables',
                'indexes': [models.Index(fields=['table_type', 'is_active'], name='payroll_tax_type_active_idx'), models.Index(fields=['effective_date'], name='payroll_tax_eff_date_idx')],
                'unique_together': {('table_type', 'concept', 'effective_date')},
            },
        ),
        migrations.CreateModel(
            name='PayrollFeedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('feedback_type', models.CharField(choices=[('schedule', 'Horarios y Turnos'), ('supervisor', 'Supervisor'), ('hr', 'Recursos Humanos'), ('payroll', 'Nómina'), ('benefits', 'Beneficios'), ('workplace', 'Ambiente Laboral'), ('general', 'General')], max_length=20, verbose_name='Tipo de feedback')),
                ('priority', models.CharField(choices=[('low', 'Baja'), ('medium', 'Media'), ('high', 'Alta'), ('urgent', 'Urgente')], default='medium', max_length=20, verbose_name='Prioridad')),
                ('subject', models.CharField(max_length=200, verbose_name='Asunto')),
                ('message', models.TextField(verbose_name='Mensaje')),
                ('send_to_supervisor', models.BooleanField(default=True, verbose_name='Enviar a supervisor')),
                ('send_to_hr', models.BooleanField(default=False, verbose_name='Enviar a RRHH')),
                ('is_anonymous', models.BooleanField(default=False, verbose_name='Anónimo')),
                ('is_resolved', models.BooleanField(default=False, verbose_name='Resuelto')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='Notas de resolución')),
                ('response_message', models.TextField(blank=True, verbose_name='Respuesta')),
                ('response_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de respuesta')),
                ('created_via', models.CharField(default='whatsapp', max_length=20, verbose_name='Creado vía')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payroll_feedback', to='payroll.payrollemployee', verbose_name='Empleado')),
                ('responded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Respondido por')),
            ],
            options={
                'verbose_name': 'Feedback de Nómina',
                'verbose_name_plural': 'Feedback de Nómina',
                'db_table': 'payroll_feedback',
            },
        ),
        migrations.CreateModel(
            name='PayrollCalculation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('base_salary', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Salario base')),
                ('overtime_hours', models.DecimalField(decimal_places=2, default=0, max_digits=6, verbose_name='Horas extra')),
                ('overtime_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Monto horas extra')),
                ('bonuses', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Bonos')),
                ('commissions', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Comisiones')),
                ('other_income', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Otros ingresos')),
                ('gross_income', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Ingreso bruto')),
                ('isr_withheld', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='ISR retenido')),
                ('imss_employee', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='IMSS empleado')),
                ('infonavit_employee', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='INFONAVIT empleado')),
                ('loan_deductions', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Deducciones préstamos')),
                ('advance_deductions', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Deducciones adelantos')),
                ('other_deductions', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Otras deducciones')),
                ('total_deductions', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Total deducciones')),
                ('net_pay', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Neto a pagar')),
                ('imss_employer', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='IMSS patrón')),
                ('infonavit_employer', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='INFONAVIT patrón')),
                ('total_employer_cost', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Costo total patrón')),
                ('calculation_date', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de cálculo')),
                ('calculation_version', models.CharField(default='1.0', max_length=20, verbose_name='Versión de cálculo')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payroll_calculations', to='payroll.payrollemployee', verbose_name='Empleado')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calculations', to='payroll.payrollperiod', verbose_name='Período')),
            ],
            options={
                'verbose_name': 'Cálculo de Nómina',
                'verbose_name_plural': 'Cálculos de Nómina',
                'db_table': 'payroll_calculation',
            },
        ),
        migrations.CreateModel(
            name='OverheadMLModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('model_name', models.CharField(max_length=100, verbose_name='Nombre del modelo')),
                ('model_type', models.CharField(choices=[('random_forest', 'Random Forest'), ('neural_network', 'Neural Network'), ('gradient_boosting', 'Gradient Boosting'), ('lstm', 'LSTM'), ('transformer', 'Transformer'), ('hybrid_ml_aura', 'Híbrido ML + AURA'), ('aura_enhanced', 'AURA Enhanced')], default='hybrid_ml_aura', max_length=30, verbose_name='Tipo de modelo')),
                ('accuracy', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Precisión (%)')),
                ('precision', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Precisión (%)')),
                ('recall', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Recall (%)')),
                ('f1_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='F1 Score')),
                ('mse', models.DecimalField(decimal_places=4, default=0, max_digits=10, verbose_name='Mean Squared Error')),
                ('aura_ethics_compliance', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Cumplimiento ética AURA')),
                ('aura_fairness_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score equidad AURA')),
                ('aura_bias_detection', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Detección sesgos AURA')),
                ('training_data_size', models.IntegerField(default=0, verbose_name='Tamaño datos entrenamiento')),
                ('validation_data_size', models.IntegerField(default=0, verbose_name='Tamaño datos validación')),
                ('test_data_size', models.IntegerField(default=0, verbose_name='Tamaño datos prueba')),
                ('model_parameters', models.JSONField(default=dict, verbose_name='Parámetros del modelo')),
                ('feature_importance', models.JSONField(default=dict, verbose_name='Importancia características')),
                ('aura_weights', models.JSONField(default=dict, verbose_name='Pesos AURA')),
                ('last_training_date', models.DateTimeField(blank=True, null=True, verbose_name='Última fecha entrenamiento')),
                ('next_training_date', models.DateTimeField(blank=True, null=True, verbose_name='Próxima fecha entrenamiento')),
                ('training_frequency_days', models.IntegerField(default=30, verbose_name='Frecuencia entrenamiento (días)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Modelo activo')),
                ('is_production', models.BooleanField(default=False, verbose_name='En producción')),
                ('version', models.CharField(default='1.0.0', max_length=20, verbose_name='Versión')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overhead_ml_models', to='payroll.payrollcompany')),
            ],
            options={
                'verbose_name': 'Modelo ML Overhead',
                'verbose_name_plural': 'Modelos ML Overhead',
                'db_table': 'payroll_overhead_ml_model',
            },
        ),
        migrations.CreateModel(
            name='OverheadCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nombre de categoría')),
                ('description', models.TextField(blank=True, verbose_name='Descripción')),
                ('calculation_method', models.CharField(choices=[('percentage', 'Porcentaje del salario'), ('fixed', 'Monto fijo'), ('formula', 'Fórmula personalizada'), ('ml_predicted', 'Predicción ML')], default='percentage', max_length=50, verbose_name='Método de cálculo')),
                ('default_rate', models.DecimalField(decimal_places=4, default=0.0, max_digits=8, verbose_name='Tasa por defecto')),
                ('min_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Monto mínimo')),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Monto máximo')),
                ('formula', models.TextField(blank=True, verbose_name='Fórmula personalizada')),
                ('aura_category', models.CharField(choices=[('infrastructure', 'Infraestructura'), ('administrative', 'Administrativo'), ('benefits', 'Beneficios'), ('training', 'Capacitación'), ('technology', 'Tecnología'), ('social_impact', 'Impacto Social'), ('sustainability', 'Sustentabilidad'), ('wellbeing', 'Bienestar'), ('innovation', 'Innovación')], default='administrative', max_length=50, verbose_name='Categoría AURA')),
                ('ml_enabled', models.BooleanField(default=True, verbose_name='ML habilitado')),
                ('ml_weight', models.DecimalField(decimal_places=2, default=1.0, max_digits=3, verbose_name='Peso ML')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overhead_categories', to='payroll.payrollcompany')),
            ],
            options={
                'verbose_name': 'Categoría de Overhead',
                'verbose_name_plural': 'Categorías de Overhead',
                'db_table': 'payroll_overhead_category',
            },
        ),
        migrations.CreateModel(
            name='OverheadBenchmark',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('industry', models.CharField(max_length=100, verbose_name='Industria')),
                ('region', models.CharField(max_length=100, verbose_name='Región')),
                ('company_size_range', models.CharField(choices=[('1-10', '1-10 empleados'), ('11-50', '11-50 empleados'), ('51-200', '51-200 empleados'), ('201-500', '201-500 empleados'), ('501-1000', '501-1000 empleados'), ('1000+', '1000+ empleados')], max_length=20, verbose_name='Rango tamaño empresa')),
                ('infrastructure_benchmark', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Benchmark infraestructura (%)')),
                ('administrative_benchmark', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Benchmark administrativo (%)')),
                ('benefits_benchmark', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Benchmark beneficios (%)')),
                ('training_benchmark', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Benchmark capacitación (%)')),
                ('technology_benchmark', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Benchmark tecnología (%)')),
                ('social_impact_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark impacto social (%)')),
                ('sustainability_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark sustentabilidad (%)')),
                ('wellbeing_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark bienestar (%)')),
                ('innovation_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark innovación (%)')),
                ('total_overhead_benchmark', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Benchmark overhead total (%)')),
                ('aura_enhanced_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark AURA (%)')),
                ('percentile_25', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentil 25')),
                ('percentile_50', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentil 50')),
                ('percentile_75', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentil 75')),
                ('percentile_90', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Percentil 90')),
                ('data_source', models.CharField(default='market_research', max_length=100, verbose_name='Fuente de datos')),
                ('sample_size', models.IntegerField(default=0, verbose_name='Tamaño muestra')),
                ('confidence_level', models.DecimalField(decimal_places=2, default=95.0, max_digits=5, verbose_name='Nivel confianza (%)')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Benchmark Overhead',
                'verbose_name_plural': 'Benchmarks Overhead',
                'db_table': 'payroll_overhead_benchmark',
                'indexes': [models.Index(fields=['industry'], name='payroll_oh_bm_industry_idx'), models.Index(fields=['region'], name='payroll_oh_bm_region_idx'), models.Index(fields=['company_size_range'], name='payroll_oh_bm_size_idx'), models.Index(fields=['total_overhead_benchmark'], name='payroll_oh_bm_total_idx')],
                'unique_together': {('industry', 'region', 'company_size_range')},
            },
        ),
        migrations.CreateModel(
            name='NineBoxMatrix',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('performance_level', models.CharField(choices=[('low', 'Bajo'), ('medium', 'Medio'), ('high', 'Alto')], max_length=10, verbose_name='Nivel de Desempeño')),
                ('potential_level', models.CharField(choices=[('low', 'Bajo'), ('medium', 'Medio'), ('high', 'Alto')], max_length=10, verbose_name='Nivel de Potencial')),
                ('box_category', models.CharField(choices=[('1', 'Estrella Emergente'), ('2', 'Alto Potencial'), ('3', 'Líder Estratégico'), ('4', 'Profesional Confiable'), ('5', 'Profesional Estable'), ('6', 'Profesional en Desarrollo'), ('7', 'Profesional Especializado'), ('8', 'Profesional Eficiente'), ('9', 'Profesional Básico')], max_length=2, verbose_name='Categoría 9 Boxes')),
                ('performance_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de Desempeño')),
                ('potential_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de Potencial')),
                ('performance_factors', models.JSONField(default=dict, verbose_name='Factores de Desempeño')),
                ('potential_factors', models.JSONField(default=dict, verbose_name='Factores de Potencial')),
                ('development_plan', models.TextField(blank=True, verbose_name='Plan de Desarrollo')),
                ('career_path', models.TextField(blank=True, verbose_name='Ruta de Carrera')),
                ('retention_risk', models.CharField(choices=[('low', 'Bajo'), ('medium', 'Medio'), ('high', 'Alto'), ('critical', 'Crítico')], max_length=20, verbose_name='Riesgo de Retención')),
                ('recommended_actions', models.JSONField(default=list, verbose_name='Acciones Recomendadas')),
                ('timeline', models.CharField(blank=True, max_length=50, verbose_name='Timeline')),
                ('next_review_date', models.DateField(blank=True, null=True, verbose_name='Próxima Revisión')),
                ('progress_notes', models.TextField(blank=True, verbose_name='Notas de Progreso')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nine_box_evaluations', to='payroll.payrollemployee', verbose_name='Empleado')),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Evaluador')),
            ],
            options={
                'verbose_name': 'Matriz 9 Boxes',
                'verbose_name_plural': 'Matrices 9 Boxes',
                'db_table': 'payroll_nine_box_matrix',
            },
        ),
        migrations.CreateModel(
            name='MLAttendanceModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('model_name', models.CharField(max_length=100, verbose_name='Nombre del modelo')),
                ('model_type', models.CharField(choices=[('random_forest', 'Random Forest'), ('neural_network', 'Neural Network'), ('gradient_boosting', 'Gradient Boosting'), ('lstm', 'LSTM'), ('hybrid', 'Híbrido')], max_length=20, verbose_name='Tipo de modelo')),
                ('accuracy', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Precisión (%)')),
                ('precision', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Precisión (%)')),
                ('recall', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Recall (%)')),
                ('training_data_size', models.IntegerField(default=0, verbose_name='Tamaño datos entrenamiento')),
                ('last_training_date', models.DateTimeField(blank=True, null=True, verbose_name='Última fecha de entrenamiento')),
                ('model_parameters', models.JSONField(default=dict, verbose_name='Parámetros del modelo')),
                ('is_active', models.BooleanField(default=True, verbose_name='Modelo activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ml_models', to='payroll.payrollcompany', verbose_name='Empresa')),
            ],
            options={
                'verbose_name': 'Modelo ML de Asistencia',
                'verbose_name_plural': 'Modelos ML de Asistencia',
                'db_table': 'payroll_ml_attendance_model',
            },
        ),
        migrations.CreateModel(
            name='EmployeeShift',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('shift_name', models.CharField(max_length=100, verbose_name='Nombre del turno')),
                ('shift_type', models.CharField(choices=[('morning', 'Matutino'), ('afternoon', 'Vespertino'), ('night', 'Nocturno'), ('rotating', 'Rotativo'), ('flexible', 'Flexible'), ('remote', 'Remoto'), ('hybrid', 'Híbrido')], max_length=20, verbose_name='Tipo de turno')),
                ('status', models.CharField(choices=[('active', 'Activo'), ('inactive', 'Inactivo'), ('temporary', 'Temporal')], default='active', max_length=20, verbose_name='Estado')),
                ('start_time', models.TimeField(verbose_name='Hora de inicio')),
                ('end_time', models.TimeField(verbose_name='Hora de fin')),
                ('break_start', models.TimeField(blank=True, null=True, verbose_name='Inicio de descanso')),
                ('break_end', models.TimeField(blank=True, null=True, verbose_name='Fin de descanso')),
                ('work_days', models.JSONField(default=list, verbose_name='Días de trabajo')),
                ('location', models.JSONField(default=dict, verbose_name='Ubicación del turno')),
                ('is_location_variable', models.BooleanField(default=False, verbose_name='Ubicación variable')),
                ('hours_per_day', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Horas por día')),
                ('overtime_threshold', models.DecimalField(decimal_places=2, default=8.0, max_digits=4, verbose_name='Umbral horas extra')),
                ('effective_date', models.DateField(verbose_name='Fecha efectiva')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Fecha de fin')),
                ('approval_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de aprobación')),
                ('notes', models.TextField(blank=True, verbose_name='Notas')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Aprobado por')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shifts', to='payroll.payrollemployee', verbose_name='Empleado')),
            ],
            options={
                'verbose_name': 'Turno de Empleado',
                'verbose_name_plural': 'Turnos de Empleados',
                'db_table': 'payroll_employee_shift',
            },
        ),
        migrations.CreateModel(
            name='EmployeeRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('request_type', models.CharField(choices=[('vacation', 'Vacaciones'), ('sick_leave', 'Incapacidad'), ('personal_leave', 'Permiso personal'), ('overtime', 'Horas extra'), ('advance', 'Adelanto')], max_length=20, verbose_name='Tipo de solicitud')),
                ('start_date', models.DateField(verbose_name='Fecha de inicio')),
                ('end_date', models.DateField(verbose_name='Fecha de fin')),
                ('days_requested', models.IntegerField(verbose_name='Días solicitados')),
                ('reason', models.TextField(verbose_name='Motivo')),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('approved', 'Aprobada'), ('rejected', 'Rechazada'), ('cancelled', 'Cancelada')], default='pending', max_length=20, verbose_name='Estado')),
                ('approval_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de aprobación')),
                ('approval_notes', models.TextField(blank=True, verbose_name='Notas de aprobación')),
                ('created_via', models.CharField(default='whatsapp', max_length=20, verbose_name='Creado vía')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Aprobado por')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='payroll.payrollemployee', verbose_name='Empleado')),
            ],
            options={
                'verbose_name': 'Solicitud de Empleado',
                'verbose_name_plural': 'Solicitudes de Empleados',
                'db_table': 'payroll_employee_request',
            },
        ),
        migrations.CreateModel(
            name='EmployeeOverheadCalculation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('infrastructure_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo infraestructura')),
                ('administrative_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo administrativo')),
                ('benefits_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo beneficios')),
                ('training_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo capacitación')),
                ('technology_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo tecnología')),
                ('social_impact_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo impacto social')),
                ('sustainability_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo sustentabilidad')),
                ('wellbeing_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo bienestar')),
                ('innovation_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Costo innovación')),
                ('traditional_overhead', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Overhead tradicional')),
                ('aura_enhanced_overhead', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Overhead mejorado AURA')),
                ('total_overhead', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Overhead total')),
                ('overhead_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Porcentaje overhead')),
                ('ml_predicted_overhead', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Overhead predicho ML')),
                ('ml_confidence_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score confianza ML')),
                ('ml_optimization_potential', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Potencial optimización ML')),
                ('ml_recommendations', models.JSONField(default=dict, verbose_name='Recomendaciones ML')),
                ('aura_ethics_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score ética AURA')),
                ('aura_fairness_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score equidad AURA')),
                ('aura_sustainability_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score sustentabilidad AURA')),
                ('aura_insights', models.JSONField(default=dict, verbose_name='Insights AURA')),
                ('industry_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark industria')),
                ('company_size_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark tamaño empresa')),
                ('regional_benchmark', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Benchmark regional')),
                ('calculation_version', models.CharField(default='2.0', max_length=20, verbose_name='Versión cálculo')),
                ('calculated_at', models.DateTimeField(auto_now_add=True, verbose_name='Calculado en')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overhead_calculations', to='payroll.payrollemployee')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overhead_calculations', to='payroll.payrollperiod')),
            ],
            options={
                'verbose_name': 'Cálculo Overhead Empleado',
                'verbose_name_plural': 'Cálculos Overhead Empleados',
                'db_table': 'payroll_employee_overhead',
            },
        ),
        migrations.CreateModel(
            name='AttendanceRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(verbose_name='Fecha')),
                ('check_in_time', models.DateTimeField(blank=True, null=True, verbose_name='Hora de entrada')),
                ('check_out_time', models.DateTimeField(blank=True, null=True, verbose_name='Hora de salida')),
                ('check_in_latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Latitud entrada')),
                ('check_in_longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Longitud entrada')),
                ('check_out_latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Latitud salida')),
                ('check_out_longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Longitud salida')),
                ('status', models.CharField(choices=[('present', 'Presente'), ('absent', 'Ausente'), ('late', 'Tardanza'), ('half_day', 'Medio día'), ('remote', 'Remoto')], default='present', max_length=20, verbose_name='Estado')),
                ('hours_worked', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Horas trabajadas')),
                ('overtime_hours', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Horas extra')),
                ('check_in_method', models.CharField(default='whatsapp', max_length=20, verbose_name='Método de entrada')),
                ('check_out_method', models.CharField(default='whatsapp', max_length=20, verbose_name='Método de salida')),
                ('notes', models.TextField(blank=True, verbose_name='Notas')),
                ('ml_prediction', models.JSONField(default=dict, verbose_name='Predicción ML')),
                ('ml_confidence', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Confianza ML (%)')),
                ('ml_anomaly_detected', models.BooleanField(default=False, verbose_name='Anomalía ML detectada')),
                ('ml_anomaly_type', models.CharField(blank=True, max_length=50, verbose_name='Tipo de anomalía')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='payroll.payrollemployee', verbose_name='Empleado')),
            ],
            options={
                'verbose_name': 'Registro de Asistencia',
                'verbose_name_plural': 'Registros de Asistencia',
                'db_table': 'payroll_attendance',
            },
        ),
        migrations.CreateModel(
            name='TeamOverheadAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('team_name', models.CharField(max_length=100, verbose_name='Nombre del equipo')),
                ('department', models.CharField(max_length=100, verbose_name='Departamento')),
                ('team_size', models.IntegerField(verbose_name='Tamaño del equipo')),
                ('total_salaries', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Total salarios')),
                ('total_overhead', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Total overhead')),
                ('overhead_per_employee', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Overhead por empleado')),
                ('team_ethics_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score ética equipo')),
                ('team_diversity_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score diversidad')),
                ('team_sustainability_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score sustentabilidad')),
                ('team_innovation_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score innovación')),
                ('ml_efficiency_prediction', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Predicción eficiencia ML')),
                ('ml_turnover_risk', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Riesgo rotación ML')),
                ('ml_performance_forecast', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Pronóstico desempeño ML')),
                ('ml_cost_optimization', models.JSONField(default=dict, verbose_name='Optimización costos ML')),
                ('efficiency_score', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Score eficiencia')),
                ('industry_percentile', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Percentil industria')),
                ('company_ranking', models.IntegerField(default=0, verbose_name='Ranking en empresa')),
                ('aura_holistic_assessment', models.JSONField(default=dict, verbose_name='Evaluación holística AURA')),
                ('aura_energy_analysis', models.JSONField(default=dict, verbose_name='Análisis energético AURA')),
                ('aura_compatibility_matrix', models.JSONField(default=dict, verbose_name='Matriz compatibilidad AURA')),
                ('aura_growth_recommendations', models.JSONField(default=dict, verbose_name='Recomendaciones crecimiento AURA')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_analyses', to='payroll.payrollcompany')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_analyses', to='payroll.payrollperiod')),
                ('team_lead', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payroll.payrollemployee', verbose_name='Líder del equipo')),
            ],
            options={
                'verbose_name': 'Análisis Overhead Equipo',
                'verbose_name_plural': 'Análisis Overhead Equipos',
                'db_table': 'payroll_team_overhead_analysis',
                'indexes': [models.Index(fields=['company', 'period'], name='payroll_team_oh_comp_idx'), models.Index(fields=['department'], name='payroll_team_oh_dept_idx'), models.Index(fields=['efficiency_score'], name='payroll_team_oh_eff_idx'), models.Index(fields=['team_ethics_score'], name='payroll_team_oh_eth_idx')],
                'unique_together': {('company', 'team_name', 'period')},
            },
        ),
        migrations.CreateModel(
            name='TaxValidationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('validation_type', models.CharField(choices=[('isr', 'ISR'), ('imss', 'IMSS'), ('infonavit', 'INFONAVIT'), ('uma', 'UMA'), ('general', 'General')], max_length=20)),
                ('test_salary', models.DecimalField(decimal_places=2, max_digits=10)),
                ('calculated_isr', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('calculated_imss', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('calculated_infonavit', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('validation_status', models.CharField(choices=[('ok', 'OK'), ('warning', 'Warning'), ('error', 'Error')], max_length=20)),
                ('message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll.payrollcompany')),
            ],
            options={
                'db_table': 'payroll_tax_validation_log',
                'indexes': [models.Index(fields=['validation_type', 'company'], name='payroll_tax_val_type_idx'), models.Index(fields=['validation_status'], name='payroll_tax_val_status_idx'), models.Index(fields=['created_at'], name='payroll_tax_val_created_idx')],
            },
        ),
        migrations.CreateModel(
            name='ShiftChangeRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('request_type', models.CharField(choices=[('temporary', 'Cambio temporal'), ('permanent', 'Cambio permanente'), ('swap', 'Intercambio'), ('emergency', 'Emergencia')], max_length=20, verbose_name='Tipo de solicitud')),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('approved', 'Aprobada'), ('rejected', 'Rechazada'), ('cancelled', 'Cancelada')], default='pending', max_length=20, verbose_name='Estado')),
                ('start_date', models.DateField(verbose_name='Fecha de inicio')),
                ('end_date', models.DateField(verbose_name='Fecha de fin')),
                ('reason', models.TextField(verbose_name='Motivo')),
                ('emergency_details', models.TextField(blank=True, verbose_name='Detalles de emergencia')),
                ('approval_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de aprobación')),
                ('approval_notes', models.TextField(blank=True, verbose_name='Notas de aprobación')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Aprobado por')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shift_requests', to='payroll.payrollemployee', verbose_name='Empleado')),
                ('requested_shift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payroll.employeeshift', verbose_name='Turno solicitado')),
            ],
            options={
                'verbose_name': 'Solicitud de Cambio de Turno',
                'verbose_name_plural': 'Solicitudes de Cambio de Turno',
                'db_table': 'payroll_shift_change_request',
                'indexes': [models.Index(fields=['employee', 'status'], name='payroll_shift_req_emp_stat_idx'), models.Index(fields=['request_type'], name='payroll_shift_req_type_idx'), models.Index(fields=['start_date', 'end_date'], name='payroll_shift_req_dates_idx')],
            },
        ),
        migrations.CreateModel(
            name='PermisoEspecial',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('permiso_type', models.CharField(choices=[('maternity', 'Maternidad'), ('paternity', 'Paternidad'), ('illness', 'Enfermedad Prolongada'), ('home_office', 'Home Office'), ('license', 'Licencia'), ('promotion', 'Promoción'), ('recognition', 'Reconocimiento'), ('special_project', 'Proyecto Especial'), ('training', 'Capacitación'), ('other', 'Otro')], max_length=20, verbose_name='Tipo de Permiso')),
                ('title', models.CharField(max_length=200, verbose_name='Título del Permiso')),
                ('description', models.TextField(verbose_name='Descripción')),
                ('start_date', models.DateField(verbose_name='Fecha de Inicio')),
                ('end_date', models.DateField(verbose_name='Fecha de Fin')),
                ('days_requested', models.IntegerField(verbose_name='Días Solicitados')),
                ('status', models.CharField(choices=[('draft', 'Borrador'), ('pending', 'Pendiente'), ('approved', 'Aprobado'), ('rejected', 'Rechazado'), ('cancelled', 'Cancelado'), ('completed', 'Completado')], default='draft', max_length=20, verbose_name='Estado')),
                ('priority', models.CharField(choices=[('low', 'Baja'), ('medium', 'Media'), ('high', 'Alta'), ('urgent', 'Urgente')], default='medium', max_length=20, verbose_name='Prioridad')),
                ('details', models.JSONField(default=dict, verbose_name='Detalles Específicos')),
                ('supporting_documents', models.JSONField(default=list, verbose_name='Documentos de Apoyo')),
                ('medical_certificate', models.BooleanField(default=False, verbose_name='Certificado Médico')),
                ('legal_documentation', models.BooleanField(default=False, verbose_name='Documentación Legal')),
                ('supervisor_approval', models.BooleanField(default=False, verbose_name='Aprobación Supervisor')),
                ('hr_approval', models.BooleanField(default=False, verbose_name='Aprobación RRHH')),
                ('management_approval', models.BooleanField(default=False, verbose_name='Aprobación Gerencia')),
                ('supervisor_approval_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha Aprobación Supervisor')),
                ('hr_approval_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha Aprobación RRHH')),
                ('management_approval_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha Aprobación Gerencia')),
                ('supervisor_notes', models.TextField(blank=True, verbose_name='Notas del Supervisor')),
                ('hr_notes', models.TextField(blank=True, verbose_name='Notas de RRHH')),
                ('management_notes', models.TextField(blank=True, verbose_name='Notas de Gerencia')),
                ('salary_impact', models.JSONField(default=dict, verbose_name='Impacto en Salario')),
                ('benefits_impact', models.JSONField(default=dict, verbose_name='Impacto en Beneficios')),
                ('notifications_sent', models.JSONField(default=list, verbose_name='Notificaciones Enviadas')),
                ('created_via', models.CharField(default='admin', max_length=20, verbose_name='Creado vía')),
                ('is_urgent', models.BooleanField(default=False, verbose_name='Urgente')),
                ('requires_immediate_attention', models.BooleanField(default=False, verbose_name='Requiere Atención Inmediata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by_hr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permisos_aprobados_hr', to=settings.AUTH_USER_MODEL, verbose_name='Aprobado por RRHH')),
                ('approved_by_management', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permisos_aprobados_management', to=settings.AUTH_USER_MODEL, verbose_name='Aprobado por Gerencia')),
                ('approved_by_supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permisos_aprobados_supervisor', to=settings.AUTH_USER_MODEL, verbose_name='Aprobado por Supervisor')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permisos_especiales', to='payroll.payrollemployee', verbose_name='Empleado')),
            ],
            options={
                'verbose_name': 'Permiso Especial',
                'verbose_name_plural': 'Permisos Especiales',
                'db_table': 'payroll_permiso_especial',
                'indexes': [models.Index(fields=['employee', 'permiso_type'], name='payroll_permiso_emp_type_idx'), models.Index(fields=['status'], name='payroll_permiso_status_idx'), models.Index(fields=['priority'], name='payroll_permiso_priority_idx'), models.Index(fields=['start_date', 'end_date'], name='payroll_permiso_dates_idx'), models.Index(fields=['is_urgent'], name='payroll_permiso_urgent_idx')],
            },
        ),
        migrations.CreateModel(
            name='PerformanceEvaluation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('evaluation_type', models.CharField(choices=[('quarterly', 'Trimestral'), ('semi_annual', 'Semestral'), ('annual', 'Anual'), ('probation', 'Período de prueba'), ('special', 'Especial')], max_length=20, verbose_name='Tipo de evaluación')),
                ('evaluation_period_start', models.DateField(verbose_name='Inicio del período')),
                ('evaluation_period_end', models.DateField(verbose_name='Fin del período')),
                ('status', models.CharField(choices=[('draft', 'Borrador'), ('in_progress', 'En progreso'), ('completed', 'Completada'), ('reviewed', 'Revisada'), ('approved', 'Aprobada')], default='draft', max_length=20, verbose_name='Estado')),
                ('job_knowledge', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Conocimiento del trabajo')),
                ('quality_of_work', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Calidad del trabajo')),
                ('quantity_of_work', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Cantidad de trabajo')),
                ('reliability', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Confiabilidad')),
                ('teamwork', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Trabajo en equipo')),
                ('communication', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Comunicación')),
                ('initiative', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Iniciativa')),
                ('leadership', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Liderazgo')),
                ('attendance', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Asistencia')),
                ('overall_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Calificación general')),
                ('strengths', models.TextField(blank=True, verbose_name='Fortalezas')),
                ('areas_for_improvement', models.TextField(blank=True, verbose_name='Áreas de mejora')),
                ('goals', models.TextField(blank=True, verbose_name='Objetivos')),
                ('comments', models.TextField(blank=True, verbose_name='Comentarios adicionales')),
                ('employee_signature', models.BooleanField(default=False, verbose_name='Firma del empleado')),
                ('employee_signature_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de firma empleado')),
                ('supervisor_signature', models.BooleanField(default=False, verbose_name='Firma del supervisor')),
                ('supervisor_signature_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de firma supervisor')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_evaluations', to='payroll.payrollemployee', verbose_name='Empleado')),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Evaluador')),
            ],
            options={
                'verbose_name': 'Evaluación de Desempeño',
                'verbose_name_plural': 'Evaluaciones de Desempeño',
                'db_table': 'payroll_performance_evaluation',
                'indexes': [models.Index(fields=['employee', 'evaluation_type'], name='payroll_perf_eval_emp_type_idx'), models.Index(fields=['status'], name='payroll_perf_eval_status_idx'), models.Index(fields=['overall_rating'], name='payroll_perf_eval_rating_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='payrollperiod',
            index=models.Index(fields=['company', 'status'], name='payroll_period_comp_stat_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollperiod',
            index=models.Index(fields=['start_date', 'end_date'], name='payroll_period_dates_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollperiod',
            index=models.Index(fields=['attendance_accuracy'], name='payroll_period_acc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='payrollperiod',
            unique_together={('company', 'start_date', 'end_date')},
        ),
        migrations.AddIndex(
            model_name='payrollfeedback',
            index=models.Index(fields=['employee', 'feedback_type'], name='payroll_feedback_emp_type_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollfeedback',
            index=models.Index(fields=['priority'], name='payroll_feedback_priority_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollfeedback',
            index=models.Index(fields=['is_resolved'], name='payroll_feedback_resolved_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollemployee',
            index=models.Index(fields=['employee_number'], name='payroll_emp_num_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollemployee',
            index=models.Index(fields=['email'], name='payroll_emp_email_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollemployee',
            index=models.Index(fields=['is_active'], name='payroll_emp_active_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollemployee',
            index=models.Index(fields=['company'], name='payroll_emp_comp_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollemployee',
            index=models.Index(fields=['supervisor'], name='payroll_emp_sup_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollemployee',
            index=models.Index(fields=['ats_candidate_id'], name='payroll_emp_ats_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollemployee',
            index=models.Index(fields=['ml_confidence_score'], name='payroll_emp_ml_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollcompany',
            index=models.Index(fields=['country_code'], name='payroll_comp_country_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollcompany',
            index=models.Index(fields=['is_active'], name='payroll_comp_active_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollcompany',
            index=models.Index(fields=['business_unit'], name='payroll_comp_bu_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollcompany',
            index=models.Index(fields=['ats_integration_enabled'], name='payroll_comp_ats_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollcompany',
            index=models.Index(fields=['ml_attendance_mode'], name='payroll_comp_ml_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollcalculation',
            index=models.Index(fields=['period', 'employee'], name='payroll_calc_per_emp_idx'),
        ),
        migrations.AddIndex(
            model_name='payrollcalculation',
            index=models.Index(fields=['calculation_date'], name='payroll_calc_date_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='payrollcalculation',
            unique_together={('period', 'employee')},
        ),
        migrations.AddIndex(
            model_name='overheadmlmodel',
            index=models.Index(fields=['company', 'is_active'], name='payroll_oh_ml_comp_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadmlmodel',
            index=models.Index(fields=['model_type'], name='payroll_oh_ml_type_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadmlmodel',
            index=models.Index(fields=['accuracy'], name='payroll_oh_ml_acc_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadmlmodel',
            index=models.Index(fields=['is_production'], name='payroll_oh_ml_prod_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadcategory',
            index=models.Index(fields=['company', 'is_active'], name='payroll_oh_cat_comp_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadcategory',
            index=models.Index(fields=['aura_category'], name='payroll_oh_cat_aura_idx'),
        ),
        migrations.AddIndex(
            model_name='overheadcategory',
            index=models.Index(fields=['ml_enabled'], name='payroll_oh_cat_ml_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='overheadcategory',
            unique_together={('company', 'name')},
        ),
        migrations.AddIndex(
            model_name='nineboxmatrix',
            index=models.Index(fields=['employee', 'box_category'], name='payroll_nine_box_emp_cat_idx'),
        ),
        migrations.AddIndex(
            model_name='nineboxmatrix',
            index=models.Index(fields=['performance_level', 'potential_level'], name='payroll_nine_box_perf_pot_idx'),
        ),
        migrations.AddIndex(
            model_name='nineboxmatrix',
            index=models.Index(fields=['retention_risk'], name='payroll_nine_box_retention_idx'),
        ),
        migrations.AddIndex(
            model_name='mlattendancemodel',
            index=models.Index(fields=['company', 'is_active'], name='payroll_ml_comp_active_idx'),
        ),
        migrations.AddIndex(
            model_name='mlattendancemodel',
            index=models.Index(fields=['model_type'], name='payroll_ml_type_idx'),
        ),
        migrations.AddIndex(
            model_name='mlattendancemodel',
            index=models.Index(fields=['accuracy'], name='payroll_ml_acc_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeshift',
            index=models.Index(fields=['employee', 'effective_date'], name='payroll_shift_emp_date_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeshift',
            index=models.Index(fields=['shift_type'], name='payroll_shift_type_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeshift',
            index=models.Index(fields=['status'], name='payroll_shift_status_idx'),
        ),
        migrations.AddIndex(
            model_name='employeerequest',
            index=models.Index(fields=['employee', 'status'], name='payroll_req_emp_stat_idx'),
        ),
        migrations.AddIndex(
            model_name='employeerequest',
            index=models.Index(fields=['request_type'], name='payroll_req_type_idx'),
        ),
        migrations.AddIndex(
            model_name='employeerequest',
            index=models.Index(fields=['start_date', 'end_date'], name='payroll_req_dates_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeoverheadcalculation',
            index=models.Index(fields=['employee', 'period'], name='payroll_emp_oh_emp_per_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeoverheadcalculation',
            index=models.Index(fields=['ml_confidence_score'], name='payroll_emp_oh_ml_conf_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeoverheadcalculation',
            index=models.Index(fields=['aura_ethics_score'], name='payroll_emp_oh_aura_idx'),
        ),
        migrations.AddIndex(
            model_name='employeeoverheadcalculation',
            index=models.Index(fields=['calculated_at'], name='payroll_emp_oh_calc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='employeeoverheadcalculation',
            unique_together={('employee', 'period')},
        ),
        migrations.AddIndex(
            model_name='attendancerecord',
            index=models.Index(fields=['employee', 'date'], name='payroll_att_emp_date_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancerecord',
            index=models.Index(fields=['status'], name='payroll_att_status_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancerecord',
            index=models.Index(fields=['check_in_time'], name='payroll_att_checkin_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancerecord',
            index=models.Index(fields=['ml_anomaly_detected'], name='payroll_att_ml_anom_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancerecord',
            index=models.Index(fields=['ml_confidence'], name='payroll_att_ml_conf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='attendancerecord',
            unique_together={('employee', 'date')},
        ),
    ]
