# /home/pablo/app/com/chatbot/workflow/assessments/talent/talent_analysis_workflow.py
"""
Workflow para An√°lisis de Talento 360¬∞.

Este workflow maneja la recopilaci√≥n de informaci√≥n para realizar
un an√°lisis integral de talento, incluyendo sinergia de equipos,
trayectoria profesional, cultural fit y retenci√≥n.
"""

import logging
import json
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
from django.conf import settings

from app.ats.chatbot.workflow.core.base_workflow import BaseWorkflow
from app.models import Person, BusinessUnit, Company, Team
from app.ats.talent.team_synergy import TeamSynergyAnalyzer
from app.ats.talent.trajectory_analyzer import TrajectoryAnalyzer
from app.ats.talent.cultural_fit import CulturalFitAnalyzer
from app.ats.talent.learning_engine import LearningEngine
from app.ats.talent.mentor_matcher import MentorMatcher
from app.ats.talent.retention_predictor import RetentionPredictor
from app.ats.talent.intervention_system import InterventionSystem

# Importar los analizadores centralizados
from app.ml.analyzers import TalentAnalyzer, IntegratedAnalyzer

logger = logging.getLogger(__name__)

class TalentAnalysisWorkflow(BaseWorkflow):
    """Clase para el an√°lisis de talento 360¬∞ que proporciona insights sobre trayectoria, sinergia, cultural fit y retenci√≥n."""
    
    workflow_type = "talent_analysis"  # Identificador √∫nico del workflow
    """
    Workflow para gestionar el proceso de an√°lisis de talento 360¬∞.
    
    Este workflow gu√≠a al usuario a trav√©s de la recopilaci√≥n de datos
    necesarios para realizar un an√°lisis integral de talento, que incluye:
    - An√°lisis de sinergia de equipos
    - An√°lisis de trayectoria profesional
    - An√°lisis de compatibilidad cultural
    - Recomendaciones de aprendizaje
    - Emparejamiento con mentores
    - Predicci√≥n de retenci√≥n e intervenci√≥n
    """
    
    def __init__(self, user_id=None, chat_id=None, business_unit=None, **kwargs):
        """Inicializa el workflow con par√°metros espec√≠ficos."""
        super().__init__(user_id, chat_id, **kwargs)
        self.business_unit = business_unit
        self.workflow_id = "talent_analysis"
        self.workflow_name = "An√°lisis de Talento 360¬∞"
        self.analysis_type = None
        self.target_person_id = None
        self.target_team_ids = []
        self.target_company_id = None
        self.discovery_complete = False
        self.data_collection_complete = False
        self.current_phase = "discovery"  # discovery, individual_data, team_dynamics, culture, confirmation
        self.phases_data = {
            "discovery": {},
            "individual_data": {},
            "team_dynamics": {},
            "culture": {},
            "confirmation": {}
        }
        
        # Inicializar analizadores
        self.team_synergy_analyzer = TeamSynergyAnalyzer()
        self.trajectory_analyzer = TrajectoryAnalyzer()
        self.cultural_fit_analyzer = CulturalFitAnalyzer()
        self.learning_engine = LearningEngine()
        self.mentor_matcher = MentorMatcher()
        self.retention_predictor = RetentionPredictor()
        self.intervention_system = InterventionSystem()
        
    async def process_message(self, message_text: str, message_type: str = 'text') -> str:
        """
        Procesa los mensajes del usuario durante el workflow.
        
        Args:
            message_text: Texto del mensaje del usuario
            message_type: Tipo de mensaje ('text', 'image', 'document', etc.)
            
        Returns:
            str: Respuesta del chatbot
        """
        try:
            # Si estamos en la fase de descubrimiento
            if self.current_phase == "discovery":
                return await self._process_discovery_phase(message_text, message_type)
                
            # Si estamos en la fase de datos individuales
            elif self.current_phase == "individual_data":
                return await self._process_individual_data_phase(message_text, message_type)
                
            # Si estamos en la fase de din√°mica de equipo
            elif self.current_phase == "team_dynamics":
                return await self._process_team_dynamics_phase(message_text, message_type)
                
            # Si estamos en la fase de cultura organizacional
            elif self.current_phase == "culture":
                return await self._process_culture_phase(message_text, message_type)
                
            # Si estamos en la fase de confirmaci√≥n
            elif self.current_phase == "confirmation":
                return await self._process_confirmation_phase(message_text, message_type)
                
            # Caso no esperado
            else:
                logger.warning(f"Fase no reconocida en workflow de an√°lisis de talento: {self.current_phase}")
                return "Disculpa, hubo un problema con el procesamiento de tu solicitud. ¬øPodemos comenzar de nuevo?"
                
        except Exception as e:
            logger.error(f"Error en TalentAnalysisWorkflow.process_message: {str(e)}")
            return "Disculpa, ocurri√≥ un error al procesar tu mensaje. Por favor, int√©ntalo de nuevo."
    
    async def _process_discovery_phase(self, message_text: str, message_type: str) -> str:
        """Procesa mensajes durante la fase de descubrimiento."""
        # Si es el primer mensaje en esta fase, iniciar con preguntas de descubrimiento
        if not self.phases_data["discovery"]:
            self.phases_data["discovery"]["started_at"] = datetime.now().isoformat()
            return (
                "üëã Bienvenido al An√°lisis de Talento 360¬∞ de Grupo huntRED¬Æ. "
                "Este proceso nos permitir√° obtener insights valiosos sobre el talento individual y/o de equipo. "
                "\n\n¬øQu√© tipo de an√°lisis te gustar√≠a realizar?\n"
                "1Ô∏è‚É£ An√°lisis de Sinergia de Equipo\n"
                "2Ô∏è‚É£ An√°lisis de Trayectoria Profesional\n"
                "3Ô∏è‚É£ An√°lisis de Compatibilidad Cultural\n"
                "4Ô∏è‚É£ Predicci√≥n de Retenci√≥n\n"
                "5Ô∏è‚É£ An√°lisis Integral 360¬∞"
            )
            
        # Determinar el tipo de an√°lisis basado en la respuesta
        if "1" in message_text or "sinergia" in message_text.lower() or "equipo" in message_text.lower():
            self.analysis_type = "team_synergy"
            self.phases_data["discovery"]["analysis_type"] = "team_synergy"
            return (
                "Has seleccionado el An√°lisis de Sinergia de Equipo. Este an√°lisis eval√∫a la composici√≥n "
                "del equipo en t√©rminos de habilidades, personalidades, generaciones y prop√≥sito, "
                "identificando fortalezas y √°reas de mejora.\n\n"
                "Por favor, ind√≠came el nombre de la empresa y equipo que deseas analizar."
            )
            
        elif "2" in message_text or "trayectoria" in message_text.lower() or "carrera" in message_text.lower():
            self.analysis_type = "career_trajectory"
            self.phases_data["discovery"]["analysis_type"] = "career_trajectory"
            return (
                "Has seleccionado el An√°lisis de Trayectoria Profesional. Este an√°lisis predice "
                "la ruta √≥ptima de desarrollo profesional, identificando habilidades cr√≠ticas a desarrollar "
                "y oportunidades de crecimiento.\n\n"
                "Por favor, ind√≠came el nombre de la persona que deseas analizar o su ID."
            )
            
        elif "3" in message_text or "cultural" in message_text.lower() or "compatibilidad" in message_text.lower():
            self.analysis_type = "cultural_fit"
            self.phases_data["discovery"]["analysis_type"] = "cultural_fit"
            return (
                "Has seleccionado el An√°lisis de Compatibilidad Cultural. Este an√°lisis eval√∫a "
                "la alineaci√≥n de valores y pr√°cticas culturales entre la persona y la organizaci√≥n.\n\n"
                "Por favor, ind√≠came el nombre de la persona y la empresa que deseas analizar."
            )
            
        elif "4" in message_text or "retenci√≥n" in message_text.lower() or "rotaci√≥n" in message_text.lower():
            self.analysis_type = "retention"
            self.phases_data["discovery"]["analysis_type"] = "retention"
            return (
                "Has seleccionado la Predicci√≥n de Retenci√≥n. Este an√°lisis identifica el riesgo "
                "de desvinculaci√≥n y genera planes de intervenci√≥n personalizados.\n\n"
                "Por favor, ind√≠came el nombre de la persona que deseas analizar o su ID."
            )
            
        elif "5" in message_text or "360" in message_text or "integral" in message_text.lower():
            self.analysis_type = "360"
            self.phases_data["discovery"]["analysis_type"] = "360"
            return (
                "Has seleccionado el An√°lisis Integral 360¬∞. Este an√°lisis combina todos los m√≥dulos "
                "para una evaluaci√≥n hol√≠stica del talento individual y de equipo.\n\n"
                "¬øDeseas analizar a una persona espec√≠fica o a un equipo completo?"
            )
            
        # Si estamos en proceso de identificar la empresa/equipo/persona
        if self.analysis_type and not self.target_person_id and not self.target_team_ids:
            # Procesar respuesta seg√∫n tipo de an√°lisis
            if self.analysis_type in ["team_synergy", "360"] and "equipo" in message_text.lower():
                # Intentar identificar el equipo
                team_name = message_text.replace("equipo", "", 1).strip()
                # En una implementaci√≥n real, aqu√≠ buscar√≠amos el equipo en la base de datos
                # Por ahora, simularemos una respuesta exitosa
                self.target_team_ids = [1]  # ID simulado
                self.phases_data["discovery"]["team_name"] = team_name
                self.phases_data["discovery"]["team_id"] = 1
                
                # Avanzar a la siguiente fase
                self.current_phase = "team_dynamics"
                return (
                    f"Gracias. Vamos a analizar el equipo '{team_name}'.\n\n"
                    "Para realizar un an√°lisis completo, necesitar√© informaci√≥n sobre la din√°mica del equipo. "
                    "¬øPodr√≠as describir brevemente c√≥mo es la interacci√≥n entre los miembros?"
                )
                
            elif self.analysis_type in ["career_trajectory", "cultural_fit", "retention", "360"] and not "equipo" in message_text.lower():
                # Intentar identificar a la persona
                person_name = message_text.strip()
                # En una implementaci√≥n real, aqu√≠ buscar√≠amos a la persona en la base de datos
                # Por ahora, simularemos una respuesta exitosa
                self.target_person_id = 1  # ID simulado
                self.phases_data["discovery"]["person_name"] = person_name
                self.phases_data["discovery"]["person_id"] = 1
                
                # Avanzar a la siguiente fase
                self.current_phase = "individual_data"
                return (
                    f"Gracias. Vamos a analizar a '{person_name}'.\n\n"
                    "Para realizar un an√°lisis completo, necesitar√© informaci√≥n adicional. "
                    "¬øCu√°l es su puesto actual y experiencia aproximada en a√±os?"
                )
        
        # Respuesta por defecto si no se reconoce la entrada
        return (
            "No he podido entender completamente tu respuesta. Por favor, selecciona una de las opciones "
            "proporcionadas o proporciona la informaci√≥n solicitada."
        )
    
    async def _process_individual_data_phase(self, message_text: str, message_type: str) -> str:
        """Procesa mensajes durante la fase de recopilaci√≥n de datos individuales."""
        # Si es el primer mensaje en esta fase, iniciar con preguntas sobre experiencia
        if not self.phases_data["individual_data"]:
            self.phases_data["individual_data"]["started_at"] = datetime.now().isoformat()
            # Capturar informaci√≥n del mensaje actual (puesto y experiencia)
            if "puesto" in message_text.lower() or "cargo" in message_text.lower() or "posici√≥n" in message_text.lower():
                position_info = message_text.strip()
                self.phases_data["individual_data"]["position_info"] = position_info
                
                return (
                    "Gracias por esa informaci√≥n. Ahora necesito conocer sus principales habilidades y competencias. "
                    "¬øPodr√≠as enumerar las 3-5 habilidades m√°s destacadas?"
                )
            else:
                return (
                    "Entiendo. Para continuar con el an√°lisis, necesito conocer su puesto actual y experiencia aproximada. "
                    "¬øPodr√≠as proporcionarme esa informaci√≥n?"
                )
                
        # Si ya tenemos informaci√≥n de posici√≥n pero no habilidades
        elif "position_info" in self.phases_data["individual_data"] and not "skills" in self.phases_data["individual_data"]:
            skills_info = message_text.strip()
            self.phases_data["individual_data"]["skills"] = skills_info
            
            return (
                "Excelentes habilidades. Ahora, hablemos de sus aspiraciones profesionales. "
                "¬øCu√°les son sus metas de carrera a corto y mediano plazo?"
            )
            
        # Si ya tenemos habilidades pero no aspiraciones
        elif "skills" in self.phases_data["individual_data"] and not "aspirations" in self.phases_data["individual_data"]:
            aspirations_info = message_text.strip()
            self.phases_data["individual_data"]["aspirations"] = aspirations_info
            
            # Si es an√°lisis cultural, preguntar por valores
            if self.analysis_type in ["cultural_fit", "360"]:
                return (
                    "Gracias por compartir esas aspiraciones. Para evaluar compatibilidad cultural, "
                    "necesito conocer sus valores profesionales principales. "
                    "¬øQu√© valores son m√°s importantes para esta persona en su entorno laboral?"
                )
            # Si es an√°lisis de retenci√≥n, preguntar por factores de satisfacci√≥n
            elif self.analysis_type in ["retention", "360"]:
                return (
                    "Gracias por compartir esas aspiraciones. Para evaluar el riesgo de retenci√≥n, "
                    "necesito entender los factores de satisfacci√≥n laboral. "
                    "¬øQu√© aspectos del trabajo actual generan mayor y menor satisfacci√≥n?"
                )
            # Para otros an√°lisis, avanzar a la siguiente fase
            else:
                self.current_phase = "confirmation"
                return await self._generate_confirmation_message()
                
        # Si ya tenemos aspiraciones pero no valores/satisfacci√≥n (para an√°lisis que los requieren)
        elif "aspirations" in self.phases_data["individual_data"] and (
                (self.analysis_type in ["cultural_fit", "360"] and not "values" in self.phases_data["individual_data"]) or
                (self.analysis_type in ["retention", "360"] and not "satisfaction_factors" in self.phases_data["individual_data"])
            ):
            
            # Capturar valores o factores de satisfacci√≥n seg√∫n corresponda
            if self.analysis_type in ["cultural_fit", "360"]:
                values_info = message_text.strip()
                self.phases_data["individual_data"]["values"] = values_info
                
                # Si tambi√©n necesitamos factores de satisfacci√≥n (para an√°lisis 360)
                if self.analysis_type == "360" and not "satisfaction_factors" in self.phases_data["individual_data"]:
                    return (
                        "Gracias por compartir esos valores. Para completar el an√°lisis, "
                        "necesito entender los factores de satisfacci√≥n laboral. "
                        "¬øQu√© aspectos del trabajo actual generan mayor y menor satisfacci√≥n?"
                    )
                else:
                    self.current_phase = "culture"
                    return (
                        "Perfecto. Ahora necesito informaci√≥n sobre la cultura de la organizaci√≥n "
                        "para evaluar la compatibilidad. ¬øC√≥mo describir√≠as los valores y pr√°cticas "
                        "culturales predominantes en la empresa?"
                    )
                    
            elif self.analysis_type in ["retention", "360"]:
                satisfaction_info = message_text.strip()
                self.phases_data["individual_data"]["satisfaction_factors"] = satisfaction_info
                
                # Si tambi√©n necesitamos valores (para an√°lisis 360)
                if self.analysis_type == "360" and not "values" in self.phases_data["individual_data"]:
                    return (
                        "Gracias por compartir esos factores de satisfacci√≥n. Para completar el an√°lisis, "
                        "necesito conocer sus valores profesionales principales. "
                        "¬øQu√© valores son m√°s importantes para esta persona en su entorno laboral?"
                    )
                else:
                    self.current_phase = "confirmation"
                    return await self._generate_confirmation_message()
        
        # Si ya tenemos toda la informaci√≥n individual necesaria para el an√°lisis 360
        elif self.analysis_type == "360" and "values" in self.phases_data["individual_data"] and "satisfaction_factors" in self.phases_data["individual_data"]:
            self.current_phase = "culture"
            return (
                "Perfecto. Ahora necesito informaci√≥n sobre la cultura de la organizaci√≥n "
                "para evaluar la compatibilidad. ¬øC√≥mo describir√≠as los valores y pr√°cticas "
                "culturales predominantes en la empresa?"
            )
            
        # Respuesta por defecto
        return (
            "Gracias por esa informaci√≥n. Por favor, contin√∫a proporcionando los detalles solicitados "
            "para que pueda completar el an√°lisis."
        )
    
    async def _process_team_dynamics_phase(self, message_text: str, message_type: str) -> str:
        """Procesa mensajes durante la fase de recopilaci√≥n de datos de din√°mica de equipo."""
        # Si es el primer mensaje en esta fase
        if not self.phases_data["team_dynamics"]:
            self.phases_data["team_dynamics"]["started_at"] = datetime.now().isoformat()
            self.phases_data["team_dynamics"]["interaction_description"] = message_text.strip()
            
            return (
                "Gracias por esa descripci√≥n. Ahora, ¬øpodr√≠as indicarme la composici√≥n del equipo "
                "en t√©rminos de roles y experiencia? Por ejemplo: 2 desarrolladores senior, "
                "1 dise√±ador UX, 1 product manager, etc."
            )
            
        # Si ya tenemos descripci√≥n de interacci√≥n pero no composici√≥n
        elif "interaction_description" in self.phases_data["team_dynamics"] and not "composition" in self.phases_data["team_dynamics"]:
            composition_info = message_text.strip()
            self.phases_data["team_dynamics"]["composition"] = composition_info
            
            return (
                "Excelente. ¬øPodr√≠as describir las principales fortalezas y √°reas de mejora que "
                "has observado en el equipo? Esto me ayudar√° a entender mejor su din√°mica actual."
            )
            
        # Si ya tenemos composici√≥n pero no fortalezas/debilidades
        elif "composition" in self.phases_data["team_dynamics"] and not "strengths_weaknesses" in self.phases_data["team_dynamics"]:
            strengths_weaknesses_info = message_text.strip()
            self.phases_data["team_dynamics"]["strengths_weaknesses"] = strengths_weaknesses_info
            
            # Si es un an√°lisis que requiere informaci√≥n cultural, continuar a esa fase
            if self.analysis_type in ["cultural_fit", "360"]:
                self.current_phase = "culture"
                return (
                    "Gracias por esa informaci√≥n tan valiosa. Ahora me gustar√≠a conocer m√°s sobre "
                    "la cultura organizacional. ¬øC√≥mo describir√≠as los valores y pr√°cticas culturales "
                    "predominantes en la empresa?"
                )
            # De lo contrario, avanzar a confirmaci√≥n
            else:
                self.current_phase = "confirmation"
                return await self._generate_confirmation_message()
                
        # Respuesta por defecto
        return (
            "Gracias por esa informaci√≥n. Por favor, contin√∫a proporcionando los detalles solicitados "
            "para que pueda completar el an√°lisis."
        )
    
    async def _process_culture_phase(self, message_text: str, message_type: str) -> str:
        """Procesa mensajes durante la fase de recopilaci√≥n de datos culturales."""
        # Si es el primer mensaje en esta fase
        if not self.phases_data["culture"]:
            self.phases_data["culture"]["started_at"] = datetime.now().isoformat()
            self.phases_data["culture"]["org_culture_description"] = message_text.strip()
            
            return (
                "Gracias por esa descripci√≥n de la cultura. ¬øPodr√≠as indicarme cu√°les son los valores "
                "corporativos oficiales o declarados por la organizaci√≥n?"
            )
            
        # Si ya tenemos descripci√≥n de cultura pero no valores declarados
        elif "org_culture_description" in self.phases_data["culture"] and not "declared_values" in self.phases_data["culture"]:
            values_info = message_text.strip()
            self.phases_data["culture"]["declared_values"] = values_info
            
            return (
                "Perfecto. Por √∫ltimo, ¬øc√≥mo describir√≠as el estilo de liderazgo predominante "
                "en la organizaci√≥n? (Por ejemplo: participativo, directivo, coaching, etc.)"
            )
            
        # Si ya tenemos valores declarados pero no estilo de liderazgo
        elif "declared_values" in self.phases_data["culture"] and not "leadership_style" in self.phases_data["culture"]:
            leadership_info = message_text.strip()
            self.phases_data["culture"]["leadership_style"] = leadership_info
            
            # Avanzar a fase de confirmaci√≥n
            self.current_phase = "confirmation"
            return await self._generate_confirmation_message()
            
        # Respuesta por defecto
        return (
            "Gracias por esa informaci√≥n. Por favor, contin√∫a proporcionando los detalles solicitados "
            "para que pueda completar el an√°lisis."
        )
    
    async def _process_confirmation_phase(self, message_text: str, message_type: str) -> str:
        """Procesa mensajes durante la fase de confirmaci√≥n y genera el an√°lisis."""
        # Si es una confirmaci√≥n positiva
        if any(word in message_text.lower() for word in ["s√≠", "si", "adelante", "correcto", "procede", "generar"]):
            # Indicar que estamos procesando
            processing_message = (
                "¬°Excelente! Estoy procesando toda la informaci√≥n recopilada para generar "
                "un an√°lisis completo. Esto puede tomar unos momentos...\n\n"
                "‚è≥ Generando an√°lisis de talento..."
            )
            
            # En una implementaci√≥n real, aqu√≠ generar√≠amos el an√°lisis usando los m√≥dulos correspondientes
            # Por ahora, simularemos una respuesta exitosa
            
            # Generar el an√°lisis seg√∫n el tipo
            if self.analysis_type == "team_synergy":
                analysis_result = await self._generate_team_synergy_analysis()
            elif self.analysis_type == "career_trajectory":
                analysis_result = await self._generate_career_trajectory_analysis()
            elif self.analysis_type == "cultural_fit":
                analysis_result = await self._generate_cultural_fit_analysis()
            elif self.analysis_type == "retention":
                analysis_result = await self._generate_retention_analysis()
            elif self.analysis_type == "360":
                analysis_result = await self._generate_360_analysis()
            else:
                analysis_result = "No se pudo determinar el tipo de an√°lisis a generar."
                
            # Resetear el workflow para un nuevo an√°lisis
            self._reset_workflow()
                
            return f"{processing_message}\n\n{analysis_result}"
            
        # Si es una negaci√≥n o correcci√≥n
        elif any(word in message_text.lower() for word in ["no", "incorrecto", "corregir", "cambiar", "modificar"]):
            # Preguntar qu√© informaci√≥n desea corregir
            return (
                "Entiendo que hay informaci√≥n que deseas corregir. Por favor, ind√≠came qu√© aspecto "
                "espec√≠fico necesitas modificar y proporci√≥nme la informaci√≥n correcta."
            )
            
        # Si proporciona informaci√≥n para corregir
        else:
            # En una implementaci√≥n real, aqu√≠ procesar√≠amos la correcci√≥n espec√≠fica
            # Por ahora, simularemos una actualizaci√≥n gen√©rica
            correction_info = message_text.strip()
            
            return (
                f"He actualizado la informaci√≥n con tu correcci√≥n: '{correction_info}'. "
                "¬øHay alguna otra correcci√≥n que desees hacer? Si no es as√≠, por favor confirma "
                "para proceder con la generaci√≥n del an√°lisis."
            )
            
    async def _generate_confirmation_message(self) -> str:
        """Genera un mensaje de confirmaci√≥n con los datos recopilados."""
        # Construir resumen seg√∫n el tipo de an√°lisis
        summary = "He recopilado la siguiente informaci√≥n para el an√°lisis:\n\n"
        
        # Datos de descubrimiento
        if self.analysis_type == "team_synergy":
            summary += f"üìä **Tipo de An√°lisis**: Sinergia de Equipo\n"
            summary += f"üè¢ **Empresa/Equipo**: {self.phases_data['discovery'].get('team_name', 'No especificado')}\n\n"
        elif self.analysis_type == "career_trajectory":
            summary += f"üìä **Tipo de An√°lisis**: Trayectoria Profesional\n"
            summary += f"üë§ **Persona**: {self.phases_data['discovery'].get('person_name', 'No especificado')}\n\n"
        elif self.analysis_type == "cultural_fit":
            summary += f"üìä **Tipo de An√°lisis**: Compatibilidad Cultural\n"
            summary += f"üë§ **Persona**: {self.phases_data['discovery'].get('person_name', 'No especificado')}\n\n"
        elif self.analysis_type == "retention":
            summary += f"üìä **Tipo de An√°lisis**: Predicci√≥n de Retenci√≥n\n"
            summary += f"üë§ **Persona**: {self.phases_data['discovery'].get('person_name', 'No especificado')}\n\n"
        elif self.analysis_type == "360":
            summary += f"üìä **Tipo de An√°lisis**: An√°lisis Integral 360¬∞\n"
            if self.target_person_id:
                summary += f"üë§ **Persona**: {self.phases_data['discovery'].get('person_name', 'No especificado')}\n\n"
            else:
                summary += f"üè¢ **Empresa/Equipo**: {self.phases_data['discovery'].get('team_name', 'No especificado')}\n\n"
                
        # Datos individuales si aplica
        if "individual_data" in self.phases_data and self.phases_data["individual_data"]:
            summary += "üìã **Datos Individuales**:\n"
            if "position_info" in self.phases_data["individual_data"]:
                summary += f"‚Ä¢ Posici√≥n: {self.phases_data['individual_data']['position_info']}\n"
            if "skills" in self.phases_data["individual_data"]:
                summary += f"‚Ä¢ Habilidades: {self.phases_data['individual_data']['skills']}\n"
            if "aspirations" in self.phases_data["individual_data"]:
                summary += f"‚Ä¢ Aspiraciones: {self.phases_data['individual_data']['aspirations']}\n"
            if "values" in self.phases_data["individual_data"]:
                summary += f"‚Ä¢ Valores: {self.phases_data['individual_data']['values']}\n"
            if "satisfaction_factors" in self.phases_data["individual_data"]:
                summary += f"‚Ä¢ Factores de Satisfacci√≥n: {self.phases_data['individual_data']['satisfaction_factors']}\n"
            summary += "\n"
            
        # Datos de equipo si aplica
        if "team_dynamics" in self.phases_data and self.phases_data["team_dynamics"]:
            summary += "üë• **Din√°mica de Equipo**:\n"
            if "interaction_description" in self.phases_data["team_dynamics"]:
                summary += f"‚Ä¢ Interacci√≥n: {self.phases_data['team_dynamics']['interaction_description']}\n"
            if "composition" in self.phases_data["team_dynamics"]:
                summary += f"‚Ä¢ Composici√≥n: {self.phases_data['team_dynamics']['composition']}\n"
            if "strengths_weaknesses" in self.phases_data["team_dynamics"]:
                summary += f"‚Ä¢ Fortalezas/Debilidades: {self.phases_data['team_dynamics']['strengths_weaknesses']}\n"
            summary += "\n"
            
        # Datos culturales si aplica
        if "culture" in self.phases_data and self.phases_data["culture"]:
            summary += "üèõÔ∏è **Cultura Organizacional**:\n"
            if "org_culture_description" in self.phases_data["culture"]:
                summary += f"‚Ä¢ Descripci√≥n: {self.phases_data['culture']['org_culture_description']}\n"
            if "declared_values" in self.phases_data["culture"]:
                summary += f"‚Ä¢ Valores Declarados: {self.phases_data['culture']['declared_values']}\n"
            if "leadership_style" in self.phases_data["culture"]:
                summary += f"‚Ä¢ Estilo de Liderazgo: {self.phases_data['culture']['leadership_style']}\n"
            summary += "\n"
            
        # Solicitar confirmaci√≥n
        summary += "¬øEs correcta esta informaci√≥n? Si es as√≠, proceder√© a generar el an√°lisis. Si no, por favor ind√≠came qu√© aspectos necesito corregir."
        
        return summary
    
    async def _generate_team_synergy_analysis(self) -> str:
        """Genera un an√°lisis de sinergia de equipo."""
        try:
            # En una implementaci√≥n real, aqu√≠ usar√≠amos los datos recopilados
            # para generar un an√°lisis completo con TeamSynergyAnalyzer
            team_members = self.target_team_ids
            business_unit = self.business_unit
            
            # Generar el an√°lisis
            analysis_result = await self.team_synergy_analyzer.analyze_team_synergy(
                team_members=team_members,
                business_unit=business_unit
            )
            
            # Crear enlace al reporte
            report_url = f"/reports/team-synergy/{analysis_result.get('id', 'sample')}"
            
            # Crear respuesta con insights principales
            response = (
                "‚úÖ **An√°lisis de Sinergia de Equipo Completado**\n\n"
                f"**Puntuaci√≥n de Sinergia**: {analysis_result.get('synergy_score', 75)}/100\n"
                f"**Tama√±o del Equipo**: {analysis_result.get('team_size', len(team_members))} miembros\n\n"
                
                "**Distribuci√≥n de Personalidades**:\n"
            )
            
            # A√±adir distribuci√≥n de personalidades
            personality_analysis = analysis_result.get('personality_analysis', {})
            for personality, percentage in personality_analysis.get('distribution', {}).items():
                response += f"‚Ä¢ {personality}: {percentage}%\n"
            
            response += "\n**An√°lisis de Habilidades**:\n"
            skills_analysis = analysis_result.get('skills_analysis', {})
            response += f"‚Ä¢ Cobertura: {skills_analysis.get('coverage_score', 70)}/100\n"
            response += f"‚Ä¢ Balance: {skills_analysis.get('balance_score', 65)}/100\n"
            
            # A√±adir principales recomendaciones
            response += "\n**Principales Recomendaciones**:\n"
            for i, rec in enumerate(analysis_result.get('recommendations', [])[:3]):
                response += f"‚Ä¢ {rec.get('title', f'Recomendaci√≥n {i+1}')}\n"
                
            # A√±adir enlace al reporte completo
            response += ("\nüìä Puedes ver el reporte completo con visualizaciones detalladas "
                        f"en el siguiente enlace: {report_url}\n\n")
            
            # A√±adir oferta de propuesta comercial para m√°s an√°lisis
            response += (
                "üíº **¬øTe gustar√≠a recibir una propuesta comercial para realizar "
                "m√°s an√°lisis de sinergia de equipo en tu organizaci√≥n?** "
                "Podemos crear un programa personalizado para optimizar el rendimiento "
                "de tus equipos a trav√©s de an√°lisis peri√≥dicos y recomendaciones espec√≠ficas."
            )
            
            return response
            
        except Exception as e:
            logger.error(f"Error generando an√°lisis de sinergia de equipo: {str(e)}")
            return (
                "Lo siento, hubo un problema al generar el an√°lisis de sinergia de equipo. "
                "Por favor, intenta nuevamente m√°s tarde o contacta a nuestro equipo de soporte."
            )
    
    async def _generate_career_trajectory_analysis(self) -> str:
        """Genera un an√°lisis de trayectoria profesional."""
        try:
            person_id = self.target_person_id
            time_horizon = 60  # 5 a√±os
            
            # Recopilamos los datos relevantes del candidato
            person_data = self.phases_data.get('individual_data', {})
            skills_data = person_data.get('skills', {})
            experience_data = person_data.get('experience', [])
            education_data = person_data.get('education', [])
            achievements_data = person_data.get('achievements', [])
            
            # Primero intentamos usar el analizador centralizado si est√° disponible
            central_analysis_result = None
            try:
                # Preparar datos para el analizador centralizado
                analysis_data = {
                    'assessment_type': 'talent',
                    'candidate_id': str(person_id),
                    'skills': skills_data,
                    'experience': {
                        'roles': experience_data,
                        'total_years': sum(role.get('duration', 0) for role in experience_data),
                        'relevant_years': sum(role.get('duration', 0) for role in experience_data if role.get('relevant', True))
                    },
                    'education': education_data,
                    'achievements': achievements_data
                }
                
                # Instanciar y usar el analizador centralizado
                analyzer = TalentAnalyzer()
                central_analysis_result = analyzer.analyze(analysis_data, self.business_unit)
                
                if central_analysis_result and not central_analysis_result.get('status') == 'error':
                    logger.info(f"An√°lisis de talento realizado con analizador centralizado")
                else:
                    logger.warning(f"Fallback a an√°lisis tradicional: {central_analysis_result.get('message', 'Error desconocido')}")
                    central_analysis_result = None
            except Exception as e:
                logger.error(f"Error usando analizador centralizado: {str(e)}. Fallback a an√°lisis tradicional.")
                central_analysis_result = None
            
            # Si el analizador centralizado no est√° disponible o falla, usamos el tradicional
            if not central_analysis_result:
                # Generar el an√°lisis con el TrajectoryAnalyzer tradicional
                analysis_result = await self.trajectory_analyzer.predict_optimal_path(
                    person_id=person_id,
                    time_horizon=time_horizon
                )
            else:
                # Mapear los resultados del analizador centralizado al formato esperado
                analysis_result = {
                    'id': central_analysis_result.get('candidate_id', 'sample'),
                    'current_position': next((role.get('role') for role in experience_data if role.get('is_current', False)), 'No especificada'),
                    'potential_score': int(central_analysis_result.get('growth_potential', {}).get('potential_score', 0.7) * 100),
                    'optimal_path': {
                        'positions': [
                            {'position': rec.get('role'), 'is_current': i == 0, 'start_month': i * 12}
                            for i, rec in enumerate([{'role': 'Posici√≥n Actual'}] + central_analysis_result.get('role_recommendations', []))
                        ]
                    },
                    'critical_skills': [
                        {'name': gap.get('skill'), 'current_level': int(gap.get('current_level', 0) * 100), 'required_level': int(gap.get('required_level', 0) * 100)}
                        for gap in central_analysis_result.get('skill_gaps', [])
                    ],
                    'financial_projection': {'growth_rate': 30}  # Valor por defecto
                }
            
            # Crear enlace al reporte
            report_url = f"/reports/career-trajectory/{analysis_result.get('id', 'sample')}"
            
            # Crear respuesta con insights principales
            response = (
                "‚úÖ **An√°lisis de Trayectoria Profesional Completado**\n\n"
                f"**Posici√≥n Actual**: {analysis_result.get('current_position', 'No especificada')}\n"
                f"**Potencial de Desarrollo**: {analysis_result.get('potential_score', 80)}/100\n\n"
                
                "**Trayectoria √ìptima**:\n"
            )
            
            # A√±adir ruta √≥ptima
            optimal_path = analysis_result.get('optimal_path', {})
            for i, position in enumerate(optimal_path.get('positions', [])):
                prefix = "[Actual] " if position.get('is_current', False) else f"[+{position.get('start_month', i*12)}m] "
                response += f"‚Ä¢ {prefix}{position.get('position', f'Posici√≥n {i+1}')}\n"
            
            # A√±adir habilidades cr√≠ticas
            response += "\n**Habilidades Cr√≠ticas a Desarrollar**:\n"
            for i, skill in enumerate(analysis_result.get('critical_skills', [])[:3]):
                response += f"‚Ä¢ {skill.get('name', f'Habilidad {i+1}')} ({skill.get('current_level', 50)} ‚Üí {skill.get('required_level', 70)})\n"
                
            # A√±adir proyecci√≥n financiera
            financial = analysis_result.get('financial_projection', {})
            response += "\n**Proyecci√≥n Financiera**:\n"
            response += f"‚Ä¢ Crecimiento Proyectado: +{financial.get('growth_rate', 30)}%\n"
                
            # A√±adir enlace al reporte completo
            response += ("\nüìä Puedes ver el reporte completo con visualizaciones detalladas "
                        f"en el siguiente enlace: {report_url}\n\n")
            
            # A√±adir oferta de propuesta comercial para m√°s an√°lisis
            response += (
                "üíº **¬øTe gustar√≠a recibir una propuesta comercial para realizar "
                "m√°s an√°lisis de trayectoria profesional en tu organizaci√≥n?** "
                "Podemos crear un programa personalizado para optimizar el desarrollo "
                "de talento a trav√©s de an√°lisis peri√≥dicos y planes de carrera espec√≠ficos."
            )
            
            return response
            
        except Exception as e:
            logger.error(f"Error generando an√°lisis de trayectoria profesional: {str(e)}")
            return (
                "Lo siento, hubo un problema al generar el an√°lisis de trayectoria profesional. "
                "Por favor, intenta nuevamente o contacta a nuestro equipo de soporte."
            )

    async def _generate_cultural_fit_analysis(self) -> str:
        """Genera un an√°lisis de compatibilidad cultural enriquecido con el test cultural personalizado."""
        try:
            # ... (rest of the code remains the same)
            # Importamos el m√≥dulo de test cultural
            from app.ats.chatbot.workflow.cultural_fit_test import analyze_cultural_fit_responses, save_cultural_profile
            
            person_id = self.target_person_id
            company_id = self.target_company_id or 1  # ID por defecto si no se especific√≥
            business_unit = self.business_unit
            
            # Verificamos si la persona ya tiene un perfil cultural guardado
            has_profile = False
            profile_data = {}
            
            try:
                # Intentamos obtener el perfil cultural existente
                from app.models import Person, PersonCulturalProfile
                from asgiref.sync import sync_to_async
                
                # Verificar si existe perfil previo
                person = await sync_to_async(Person.objects.get)(id=person_id)
                has_profile = await sync_to_async(lambda: hasattr(person, 'cultural_profile'))()
                
                if has_profile:
                    # Obtener datos del perfil
                    cultural_profile = await sync_to_async(lambda: person.cultural_profile)()
                    profile_data = await sync_to_async(lambda: getattr(cultural_profile, 'full_profile_data', {}))() or {}
            except Exception as e:
                logger.error(f"Error verificando perfil cultural: {e}", exc_info=True)
        
            # Si no tiene perfil o estamos haciendo un nuevo an√°lisis, usamos el test cultural
            if not has_profile or self.context.get('refresh_analysis', False):
                # En un escenario real, estas respuestas vendr√≠an de interacciones previas con el usuario
                # Aqu√≠ simulamos respuestas para las dimensiones culturales
                # Valores del 1 al 5 para cada dimensi√≥n
                responses = {
                    'values': [4, 5, 4],  # Valores altos en transparencia, innovaci√≥n, colaboraci√≥n
                    'motivators': [3, 4, 5],  # Motivaci√≥n media-alta en autonom√≠a, reconocimiento e impacto
                    'interests': [4, 5],  # Alto inter√©s en resolver problemas y aprender
                    'work_style': [3, 4],  # Preferencia media-alta por estructura e independencia
                    'social_impact': [4, 5, 5],  # Alta orientaci√≥n al impacto social
                    'generational_values': [4, 5, 4]  # Alta preferencia por comunicaci√≥n digital, flexibilidad y prop√≥sito
                }
                
                # Analizar respuestas
                profile_data = await analyze_cultural_fit_responses(responses, business_unit)
                
                # Guardar perfil cultural
                await save_cultural_profile(person_id, profile_data)
            
            # Generar an√°lisis basado en el perfil cultural
            # Primero generar el an√°lisis est√°ndar con nuestro analizador existente
            base_analysis_result = await self.cultural_fit_analyzer.analyze_cultural_fit(
                person_id=person_id,
                company_id=company_id,
                business_unit=business_unit
            )
            
            # Combinar con los datos del perfil cultural enriquecido
            analysis_result = {**base_analysis_result}
            
            # Actualizar o a√±adir datos del perfil cultural
            if profile_data:
                # Actualizamos la puntuaci√≥n de alineaci√≥n
                if 'compatibility' in profile_data and business_unit in profile_data['compatibility']:
                    analysis_result['alignment_score'] = profile_data['compatibility'][business_unit]
                elif 'compatibility' in profile_data and 'general' in profile_data['compatibility']:
                    analysis_result['alignment_score'] = profile_data['compatibility']['general']
                
                # Nivel de compatibilidad
                score = analysis_result.get('alignment_score', 0)
                if score >= 85:
                    analysis_result['alignment_level'] = 'Excelente'
                elif score >= 70:
                    analysis_result['alignment_level'] = 'Muy bueno'
                elif score >= 50:
                    analysis_result['alignment_level'] = 'Bueno'
                elif score >= 30:
                    analysis_result['alignment_level'] = 'Regular'
                else:
                    analysis_result['alignment_level'] = 'Bajo'
                
                # A√±adir fortalezas como valores compartidos
                if 'strengths' in profile_data:
                    values_analysis = analysis_result.get('values_analysis', {})
                    values_analysis['common_values'] = profile_data['strengths']
                    analysis_result['values_analysis'] = values_analysis
                
                # A√±adir dimensiones culturales
                if 'scores' in profile_data:
                    cultural_dimensions = {}
                    for dimension, score in profile_data['scores'].items():
                        # Convertir a escala 0-100
                        cultural_dimensions[dimension.replace('_', ' ').title()] = score * 20
                    analysis_result['cultural_dimensions'] = cultural_dimensions
                
                # A√±adir recomendaciones
                if 'recommendations' in profile_data:
                    analysis_result['recommendations'] = [
                        {'action': rec} for rec in profile_data['recommendations']
                    ]
        
            # Crear enlace al reporte
            report_url = f"/reports/cultural-fit/{analysis_result.get('id', 'sample')}"
            
            # Crear respuesta con insights principales, enfocada en valores de Grupo huntRED¬Æ: Apoyo, Solidaridad, Sinergia
            response = (
                "‚úÖ **An√°lisis de Compatibilidad Cultural Integral**\n\n"
                f"**Puntuaci√≥n de Compatibilidad**: {analysis_result.get('alignment_score', 78)}/100\n"
                f"**Nivel de Compatibilidad**: {analysis_result.get('alignment_level', 'Bueno')}\n\n"
                
                "**Fortalezas y Valores Compartidos**:\n"
            )
            
            # A√±adir valores compartidos
            values_analysis = analysis_result.get('values_analysis', {})
            for value in values_analysis.get('common_values', ['Innovaci√≥n', 'Colaboraci√≥n']):
                response += f"‚Ä¢ {value}\n"
            
            # A√±adir dimensiones culturales con enfoque hol√≠stico
            response += "\n**Dimensiones de Compatibilidad Cultural**:\n"
            dimensions = analysis_result.get('cultural_dimensions', {})
            dimension_items = list(dimensions.items())[:5]  # Mostrar hasta 5 dimensiones
            for dimension, score in dimension_items:
                response += f"‚Ä¢ {dimension}: {score:.1f}/100\n"
                
            # A√±adir recomendaciones para mejorar la compatibilidad
            response += "\n**Recomendaciones Personalizadas**:\n"
            for i, rec in enumerate(analysis_result.get('recommendations', [])[:3]):
                response += f"‚Ä¢ {rec.get('action', f'Recomendaci√≥n {i+1}')}\n"
                
            # A√±adir enlace al reporte completo
            response += ("\nüìä Puedes ver el reporte completo con visualizaciones detalladas "
                        f"en el siguiente enlace: {report_url}\n\n")
            
            # A√±adir oferta de propuesta comercial para m√°s an√°lisis, destacando los valores de huntRED¬Æ
            response += (
                "üíº **¬øTe gustar√≠a recibir una propuesta comercial para realizar "
                "un an√°lisis de compatibilidad cultural 360¬∞ en tu organizaci√≥n?** \n\n"
                "Con nuestro enfoque integral basado en Apoyo, Solidaridad y Sinergia, "
                "creamos programas personalizados para optimizar el fit cultural, "
                "potenciar equipos de alto rendimiento y mejorar la retenci√≥n de talento clave."
            )
            
            return response
            
        except Exception as e:
            logger.error(f"Error generando an√°lisis de compatibilidad cultural: {str(e)}")
            return (
                "Lo siento, hubo un problema al generar el an√°lisis de compatibilidad cultural. "
                "Por favor, intenta nuevamente m√°s tarde o contacta a nuestro equipo de soporte."
            )
    
    async def _generate_retention_analysis(self) -> str:
        """Genera un an√°lisis de riesgo de retenci√≥n."""
        try:
            # En una implementaci√≥n real, aqu√≠ usar√≠amos los datos recopilados
            # para generar un an√°lisis completo con RetentionPredictor
            person_id = self.target_person_id
            business_unit = self.business_unit
            
            # Generar el an√°lisis
            analysis_result = await self.retention_predictor.analyze_retention_risk(
                person_id=person_id,
                business_unit=business_unit
            )
            
            # Generar plan de intervenci√≥n
            intervention_plan = await self.intervention_system.generate_intervention_plan(
                person_id=person_id,
                causal_factors=analysis_result.get('causal_factors', [])
            )
            
            # Crear enlace al reporte
            report_url = f"/reports/retention/{analysis_result.get('id', 'sample')}"
            
            # Crear respuesta con insights principales
            response = (
                "‚úÖ **An√°lisis de Riesgo de Retenci√≥n Completado**\n\n"
                f"**Puntuaci√≥n de Riesgo**: {analysis_result.get('risk_score', 65)}/100\n"
                f"**Nivel de Riesgo**: {analysis_result.get('risk_level', 'medium').title()}\n\n"
                
                "**Factores Causales Principales**:\n"
            )
            
            # A√±adir factores causales
            causal_factors = analysis_result.get('causal_factors', [])
            for factor in causal_factors[:3]:
                factor_name = factor.get('factor', 'unknown').replace('_', ' ').title()
                trend = factor.get('trend', 'stable')
                trend_icon = "üìâ" if trend == 'declining' else "üìà" if trend == 'improving' else "‚ûñ"
                response += f"‚Ä¢ {factor_name}: {factor.get('score', 50)}/100 {trend_icon}\n"
            
            # A√±adir recomendaciones del plan de intervenci√≥n
            response += "\n**Plan de Intervenci√≥n Recomendado**:\n"
            interventions = intervention_plan.get('interventions', [])
            for intervention in interventions[:2]:
                response += f"‚Ä¢ Para {intervention.get('factor_label', 'mejorar retenci√≥n')}:\n"
                for action in intervention.get('actions', [])[:2]:
                    response += f"  - {action.get('action', 'Acci√≥n recomendada')}\n"
                    
            # A√±adir m√©tricas de √©xito
            response += "\n**M√©tricas de √âxito**:\n"
            for metric in intervention_plan.get('success_metrics', [])[:3]:
                response += f"‚Ä¢ {metric}\n"
                
            # A√±adir enlace al reporte completo
            response += ("\nüìä Puedes ver el reporte completo con visualizaciones detalladas "
                        f"en el siguiente enlace: {report_url}\n\n")
            
            # A√±adir oferta de propuesta comercial para m√°s an√°lisis
            response += (
                "üíº **¬øTe gustar√≠a recibir una propuesta comercial para implementar "
                "un programa de retenci√≥n de talento en tu organizaci√≥n?** "
                "Podemos crear un sistema personalizado para identificar riesgos "
                "de rotaci√≥n y generar planes de intervenci√≥n efectivos."
            )
            
            return response
            
        except Exception as e:
            logger.error(f"Error generando an√°lisis de riesgo de retenci√≥n: {str(e)}")
            return (
                "Lo siento, hubo un problema al generar el an√°lisis de riesgo de retenci√≥n. "
                "Por favor, intenta nuevamente m√°s tarde o contacta a nuestro equipo de soporte."
            )
    
    async def _generate_360_analysis(self) -> str:
        """Genera un an√°lisis integral 360¬∞ con formato visual mejorado."""
        try:
            # Determinar si es an√°lisis individual o de equipo
            if self.target_person_id:
                # An√°lisis individual 360¬∞
                person_id = self.target_person_id
                business_unit = self.business_unit
                
                # Generar los diferentes an√°lisis
                trajectory_result = await self.trajectory_analyzer.predict_optimal_path(
                    person_id=person_id,
                    time_horizon=60
                )
                
                retention_result = await self.retention_predictor.analyze_retention_risk(
                    person_id=person_id,
                    business_unit=business_unit
                )
                
                learning_result = await self.learning_engine.generate_learning_sequence(
                    person_id=person_id,
                    context='career_development'
                )
                
                mentor_result = await self.mentor_matcher.find_optimal_mentors(
                    person_id=person_id,
                    limit=3
                )
                
                # Crear respuesta con formato visual mejorado
                response = "üéØ *An√°lisis Integral de Talento 360¬∞*\n\n"
                
                # Informaci√≥n b√°sica
                response += "üë§ *Informaci√≥n del Candidato*\n"
                response += f"‚Ä¢ Nombre: {self.phases_data['discovery'].get('person_name', 'No especificado')}\n"
                response += f"‚Ä¢ Posici√≥n Actual: {trajectory_result.get('current_position', 'No especificada')}\n"
                response += f"‚Ä¢ Unidad de Negocio: {business_unit}\n\n"
                
                # Resumen Ejecutivo
                response += "üìä *Resumen Ejecutivo*\n"
                potential_score = trajectory_result.get('potential_score', 80)
                risk_score = retention_result.get('risk_score', 65)
                risk_level = retention_result.get('risk_level', 'medium').title()
                
                # Barras de progreso visuales
                potential_progress = "üü¢" * int(potential_score/20) + "‚ö™" * (5 - int(potential_score/20))
                risk_progress = "üî¥" * int(risk_score/20) + "‚ö™" * (5 - int(risk_score/20))
                
                response += f"‚Ä¢ Potencial de Desarrollo: {potential_progress} {potential_score}/100\n"
                response += f"‚Ä¢ Riesgo de Rotaci√≥n: {risk_progress} {risk_score}/100 ({risk_level})\n"
                response += f"‚Ä¢ Compatibilidad Cultural: {'üü¢' * 3 + '‚ö™' * 2} 75/100\n\n"
                
                # Trayectoria Profesional
                response += "üéØ *Trayectoria Profesional*\n"
                optimal_path = trajectory_result.get('optimal_path', {})
                response += f"‚Ä¢ Pr√≥xima posici√≥n recomendada: {optimal_path.get('next_position', 'No especificada')}\n"
                response += f"‚Ä¢ Timeframe estimado: {optimal_path.get('timeframe', 18)} meses\n"
                response += f"‚Ä¢ Habilidades clave a desarrollar: {', '.join(optimal_path.get('key_skills', ['No especificadas']))}\n\n"
                
                # Factores de Retenci√≥n
                response += "üîç *Factores de Riesgo de Rotaci√≥n*\n"
                causal_factors = retention_result.get('causal_factors', [])
                for factor in causal_factors[:3]:
                    factor_name = factor.get('factor', 'unknown').replace('_', ' ').title()
                    factor_score = factor.get('score', 50)
                    factor_progress = "üî¥" * int(factor_score/20) + "‚ö™" * (5 - int(factor_score/20))
                    response += f"‚Ä¢ {factor_name}: {factor_progress} {factor_score}/100\n"
                response += "\n"
                
                # Plan de Aprendizaje
                response += "üìö *Plan de Aprendizaje Personalizado*\n"
                learning_modules = learning_result.get('learning_modules', [])
                for module in learning_modules[:3]:
                    response += f"‚Ä¢ {module.get('title', 'M√≥dulo')}: {module.get('description', 'No especificado')}\n"
                response += "\n"
                
                # Mentores Recomendados
                response += "üë• *Mentores Recomendados*\n"
                mentors = mentor_result.get('mentors', [])
                for mentor in mentors:
                    response += f"‚Ä¢ {mentor.get('name', 'Mentor')}: {mentor.get('expertise', 'No especificado')}\n"
                response += "\n"
                
                # Recomendaciones Finales
                response += "üí° *Recomendaciones Clave*\n"
                recommendations = [
                    "Mantener un plan de desarrollo personalizado",
                    "Establecer objetivos claros de carrera",
                    "Participar en programas de mentor√≠a",
                    "Desarrollar habilidades identificadas como cr√≠ticas"
                ]
                for rec in recommendations:
                    response += f"‚Ä¢ {rec}\n"
                response += "\n"
                
                # Pr√≥ximos Pasos
                response += "üöÄ *Pr√≥ximos Pasos*\n"
                response += "1. Revisar y validar el plan de desarrollo\n"
                response += "2. Establecer reuniones con mentores recomendados\n"
                response += "3. Iniciar los m√≥dulos de aprendizaje prioritarios\n"
                response += "4. Programar seguimiento en 3 meses\n\n"
                
                response += "¬øTe gustar√≠a profundizar en alg√∫n aspecto espec√≠fico del an√°lisis?"
                
                return response
                
            else:
                # An√°lisis de equipo
                team_ids = self.target_team_ids
                team_result = await self.team_synergy_analyzer.analyze_team_synergy(team_ids)
                
                response = "üë• *An√°lisis Integral de Equipo 360¬∞*\n\n"
                
                # Informaci√≥n del Equipo
                response += "üìã *Informaci√≥n del Equipo*\n"
                response += f"‚Ä¢ Nombre: {self.phases_data['discovery'].get('team_name', 'No especificado')}\n"
                response += f"‚Ä¢ Tama√±o: {team_result.get('team_size', len(team_ids))} miembros\n"
                response += f"‚Ä¢ Unidad de Negocio: {self.business_unit}\n\n"
                
                # Resumen Ejecutivo
                response += "üìä *Resumen Ejecutivo*\n"
                synergy_score = team_result.get('synergy_score', 75)
                skills_coverage = team_result.get('skills_analysis', {}).get('coverage_score', 70)
                diversity_score = team_result.get('generation_analysis', {}).get('diversity_score', 65)
                
                # Barras de progreso visuales
                synergy_progress = "üü¢" * int(synergy_score/20) + "‚ö™" * (5 - int(synergy_score/20))
                skills_progress = "üü¢" * int(skills_coverage/20) + "‚ö™" * (5 - int(skills_coverage/20))
                diversity_progress = "üü¢" * int(diversity_score/20) + "‚ö™" * (5 - int(diversity_score/20))
                
                response += f"‚Ä¢ Sinergia de Equipo: {synergy_progress} {synergy_score}/100\n"
                response += f"‚Ä¢ Cobertura de Habilidades: {skills_progress} {skills_coverage}/100\n"
                response += f"‚Ä¢ Diversidad Generacional: {diversity_progress} {diversity_score}/100\n\n"
                
                # Composici√≥n del Equipo
                response += "üë• *Composici√≥n del Equipo*\n"
                personality_analysis = team_result.get('personality_analysis', {})
                response += f"‚Ä¢ Personalidad Dominante: {personality_analysis.get('dominant_personality', 'Anal√≠tico')}\n"
                response += f"‚Ä¢ Diversidad de Personalidades: {personality_analysis.get('diversity_score', 68)}/100\n"
                response += f"‚Ä¢ Balance de Roles: {personality_analysis.get('role_balance', 'Bueno')}\n\n"
                
                # An√°lisis de Habilidades
                response += "üéØ *An√°lisis de Habilidades*\n"
                skills_analysis = team_result.get('skills_analysis', {})
                response += f"‚Ä¢ Cobertura: {skills_analysis.get('coverage_score', 70)}/100\n"
                response += f"‚Ä¢ Balance: {skills_analysis.get('balance_score', 65)}/100\n"
                response += f"‚Ä¢ Habilidades Cr√≠ticas: {', '.join(skills_analysis.get('critical_skills', ['No especificadas']))}\n\n"
                
                # Brechas y Oportunidades
                response += "üìà *Brechas y Oportunidades*\n"
                for gap in skills_analysis.get('skill_gaps', [])[:3]:
                    response += f"‚Ä¢ {gap}\n"
                response += "\n"
                
                # Recomendaciones
                response += "üí° *Recomendaciones para el Equipo*\n"
                recommendations = [
                    "Implementar programa de desarrollo de habilidades cr√≠ticas",
                    "Fomentar la diversidad de pensamiento",
                    "Establecer objetivos de equipo claros",
                    "Mejorar la comunicaci√≥n intergeneracional"
                ]
                for rec in recommendations:
                    response += f"‚Ä¢ {rec}\n"
                response += "\n"
                
                # Pr√≥ximos Pasos
                response += "üöÄ *Pr√≥ximos Pasos*\n"
                response += "1. Revisar y validar el an√°lisis con el equipo\n"
                response += "2. Establecer plan de acci√≥n para cerrar brechas\n"
                response += "3. Implementar programa de desarrollo\n"
                response += "4. Programar seguimiento en 3 meses\n\n"
                
                response += "¬øTe gustar√≠a profundizar en alg√∫n aspecto espec√≠fico del an√°lisis del equipo?"
                
                return response
                
        except Exception as e:
            logger.error(f"Error generando an√°lisis 360¬∞: {str(e)}")
            return "Lo siento, hubo un error al generar el an√°lisis 360¬∞. Por favor, intenta nuevamente."
    
    def _reset_workflow(self):
        """Restablece el estado del workflow para un nuevo an√°lisis."""
        self.analysis_type = None
        self.target_person_id = None
        self.target_team_ids = []
        self.target_company_id = None
        self.discovery_complete = False
        self.data_collection_complete = False
        self.current_phase = "discovery"
        self.phases_data = {
            "discovery": {},
            "individual_data": {},
            "team_dynamics": {},
            "culture": {},
            "confirmation": {}
        }
