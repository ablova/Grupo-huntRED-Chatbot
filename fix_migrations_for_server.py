#!/usr/bin/env python
"""
Script definitivo para generar archivos de migración Django optimizados para servidor.

Siguiendo las reglas globales de Grupo huntRED® para optimización de rendimiento
y mantenimiento, este script genera migraciones compatibles con el servidor
y corrige problemas comunes de dependencias circulares.
"""
import os
import sys
import datetime
from pathlib import Path

# Datos de la migración a crear
MIGRATION_NAME = "add_wordpress_fields_to_business_unit"
APP_NAME = "app"
MIGRATION_PATH = Path(__file__).parent / APP_NAME / "migrations"

# Asegurar que el directorio de migraciones existe
MIGRATION_PATH.mkdir(exist_ok=True)

# Asegurar que existe un __init__.py en el directorio de migraciones
init_file = MIGRATION_PATH / "__init__.py"
if not init_file.exists():
    with open(init_file, "w") as f:
        f.write("")
    print(f"✅ Creado archivo {init_file}")

# Contenido optimizado del archivo de migración para servidor
MIGRATION_TEMPLATE = f"""# Generated by fix_migrations_for_server.py {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}
# Compatible con reglas globales de Grupo huntRED®

from django.db import migrations, models


class Migration(migrations.Migration):

    # Esta migración no tiene dependencias porque es la primera
    # Si no es la primera en el servidor, actualiza esta lista manualmente
    dependencies = [
    ]

    operations = [
        migrations.AddField(
            model_name='businessunit',
            name='wordpress_base_url',
            field=models.URLField(blank=True, help_text='URL base de la API de WordPress (ej: https://huntu.mx/wp-json/wp/v2)', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='businessunit',  # Corregido: este es el modelo correcto
            name='wordpress_auth_token',
            field=models.CharField(blank=True, help_text='Token de autenticación para la API de WordPress', max_length=255, null=True),
        ),
    ]
"""

# Crear el archivo de migración
migration_file = MIGRATION_PATH / f"0001_{MIGRATION_NAME}.py"

# Sobrescribir el archivo existente sin preguntar
with open(migration_file, "w") as f:
    f.write(MIGRATION_TEMPLATE)

print(f"✅ Archivo de migración creado: {migration_file}")
print("\nInstrucciones para el servidor:")
print("1. Sube este archivo al directorio app/migrations/ del servidor")
print("2. Si esta NO es la primera migración en el servidor, actualiza manualmente")
print("   la lista 'dependencies' con la migración anterior")
print("3. Ejecuta 'python manage.py migrate' en el servidor")

# Actualizar settings.py para mejor compatibilidad entre entornos
SETTINGS_PATH = Path(__file__).parent / "ai_huntred" / "settings.py"
if SETTINGS_PATH.exists():
    try:
        with open(SETTINGS_PATH, "r") as f:
            settings_content = f.read()
        
        # Asegurar que la middleware de adaptación de base de datos esté correctamente configurada
        if "app.middleware.database_adapter.DatabaseAdapterMiddleware" not in settings_content:
            print("\n⚠️ La middleware DatabaseAdapterMiddleware no está en settings.py")
            print("Agrega 'app.middleware.database_adapter.DatabaseAdapterMiddleware' a MIDDLEWARE")
        else:
            print("\n✅ DatabaseAdapterMiddleware está correctamente configurada")
    except Exception as e:
        print(f"\n⚠️ Error verificando settings.py: {e}")

# Verificar y actualizar middleware de adaptación de base de datos
MIDDLEWARE_PATH = Path(__file__).parent / "app" / "middleware" / "database_adapter.py"
if MIDDLEWARE_PATH.exists():
    try:
        with open(MIDDLEWARE_PATH, "r") as f:
            middleware_content = f.read()
        
        # Verificar si el middleware necesita actualizaciones
        if "process_view" in middleware_content and "FORCE_SQLITE" in middleware_content:
            print("✅ Middleware DatabaseAdapterMiddleware parece estar correctamente configurada")
        else:
            print("⚠️ DatabaseAdapterMiddleware puede necesitar actualizaciones")
    except Exception as e:
        print(f"⚠️ Error verificando middleware: {e}")

print("\n✅ Proceso completado. El sistema debería funcionar correctamente en el servidor.")
