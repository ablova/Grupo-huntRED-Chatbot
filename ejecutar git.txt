git status
git add .
ls /home/amigro
git push origin main

cd /home/amigro
git pull origin main

git remote add origin https://github.com/ablova/Grupo-huntRED-Chatbot.git
git push -u origin main
git remote add origin https://github.com/ablova/Grupo-huntRED-Chatbot.git
git branch -M main
git push -u origin main
git clone https://github.com/ablova/Grupo-huntRED-Chatbot.git .


#Ejecutar desde el LOCAL MI COMPU
git status &&
git add . &&
git commit -m "Actualizaci√≥n del panel de administraci√≥n, modelos (quitamos subpregunta), editor de flujo, y mucho m√°s" &&
git push origin main


#Ejecutar desde el SERVIDOR Donde se realizar√° el clonado
# Truncar logs antes de iniciar el despliegue
sudo truncate -s 0 /home/amigro/logs/*.log &&
sudo truncate -s 0 /var/log/nginx/access.log &&
sudo truncate -s 0 /var/log/nginx/error.log &&
sudo truncate -s 0 /var/log/syslog &&
sudo truncate -s 0 /var/log/auth.log &&
sudo truncate -s 0 /var/log/dmesg &&
sudo truncate -s 0 /var/log/kern.log

sudo logrotate -f /etc/logrotate.conf
sudo journalctl --vacuum-time=1s
sudo journalctl --vacuum-size=50M


cd /home/amigro && source venv/bin/activate &&
git fetch origin &&
git reset --hard origin/main &&
git clean -fd &&
git status &&
git log -1 &&
mkdir -p /home/amigro/logs &&
touch /home/amigro/logs/error.log && 
chmod 664 /home/amigro/logs/error.log &&
chown pablollh:pablollh /home/amigro/logs/error.log


python manage.py makemigrations &&
python manage.py migrate &&
python manage.py collectstatic &&
sudo systemctl restart gunicorn nginx celery &&
sudo journalctl -u gunicorn &&
sudo journalctl -u nginx
cd /home/amigro/logs && cat error.log
# Ver solo errores nuevos del sistema (e.g., gunicorn o nginx)
sudo journalctl -u gunicorn -p err --since "10 minutes ago" -f
sudo journalctl -u nginx -p err --since "10 minutes ago" -f

# Filtrar errores recientes en logs espec√≠ficos
grep "ERROR" /home/amigro/logs/error.log
grep "ERROR" /var/log/nginx/error.log




gcloud compute instances create amigro \
    --zone=us-central1-a \  
    --image-family=ubuntu-2404-lts \
    --image-project=ubuntu-os-cloud \
    --machine-type=e2-small \
    --tags=http-server,https-server \
    --boot-disk-size=10GB \
    --boot-disk-type=pd-standard \
    --scopes=cloud-platform \
    --network default \
    --address=35.209.109.141

python manage.py makemigrations
python manage.py migrate
python manage.py migrate django_celery_beat

celery -A chatbot_django beat -l info
celery -A chatbot_django worker -l info

python manage.py shell
>>> from django_celery_beat.models import PeriodicTask
>>> PeriodicTask.objects.filter(enabled=True)


celery -A chatbot_django inspect scheduled
celery -A chatbot_django inspect active
tail -f /var/log/syslog
tail -f /var/log/celery/worker.log
tail -f /var/log/celery/beat.log

python manage.py shell
from app.integrations.whatsapp import send_whatsapp_message as send_whatsapp_msg
from app.models import Configuracion

config = Configuracion.objects.first()
send_whatsapp_msg(config.test_phone_number, "¬°Hola! Esta es una prueba de notificaci√≥n desde el chatbot Amigro.", '114521714899382')


curl -v "https://chatbot.amigro.org/webhook/whatsapp/048bd814-7716-4073-8acf-d491db68e9a1/"



from app.models import WhatsAppAPI, BusinessUnit

# Busca la unidad de negocio correspondiente
business_unit = BusinessUnit.objects.get(id=3)

# Busca la API de WhatsApp existente
whatsapp_api = WhatsAppAPI.objects.filter(phoneID="114521714899382").first()

if whatsapp_api:
    # Actualiza los datos
    whatsapp_api.api_token = """EAAJaOsnq2vgBOxFlPQZBYxWZB2E9isaAkZBt4SfCaLHOeBtJCbyKEfsIWV5qZAF5YElgCyrKbyDa21jXZAeZAHoa9wSILECQQRFVxXZCtxX5bph5CZC2dRbvFCKsMw0stLPIEO9y0S5klCmrZANGcUPTQV6ZB9aUbaNUwGI82lMfTpKHgC9JF45bJCblZBjZB9mznlwfeQZDZD"""
    whatsapp_api.business_unit = business_unit
    whatsapp_api.is_active = True
    whatsapp_api.save()
    print("API de WhatsApp actualizada correctamente.")
else:
    # Crear una nueva entrada si no existe
    WhatsAppAPI.objects.create(
        name="Amigro WhatsApp API",
        phoneID="114521714899382",
        api_token="""EAAJaOsnq2vgBOxFlPQZBYxWZB2E9isaAkZBt4SfCaLHOeBtJCbyKEfsIWV5qZAF5YElgCyrKbyDa21jXZAeZAHoa9wSILECQQRFVxXZCtxX5bph5CZC2dRbvFCKsMw0stLPIEO9y0S5klCmrZANGcUPTQV6ZB9aUbaNUwGI82lMfTpKHgC9JF45bJCblZBjZB9mznlwfeQZDZD""",
        business_unit=business_unit,
        is_active=True
    )
    print("Nueva API de WhatsApp creada.")


df -h /
ps aux | grep -w Z
sudo du -sh /*
free -h
sudo pkill -9 less
sudo killall -9 less
sudo snap list --all | awk '/disabled/{print $1, $3}' | while read snapname revision; do sudo snap remove "$snapname" --revision="$revision"; done
sudo find /var/log -type f -name "*.gz" -delete
sudo find /var/log -type f -name "*.old" -delete
sudo apt-get update -y && sudo apt-get upgrade -y && sudo apt-get autoremove -y && sudo apt update -y && sudo apt upgrade -y && sudo apt autoremove -y && sudo apt-get clean -y && sudo apt clean -y 
cd /home/amigro && source venv/bin/activate
# Ver los archivos m√°s grandes
sudo find / -type f -size +100M -exec ls -lh {} \;
# Ver el espacio usado por cada paquete instalado
dpkg-query -W --showformat='${Installed-Size}\t${Package}\n' | sort -rn | head -20
# Listar snaps instalados
snap list
# Remover versiones antiguas
snap list --all | awk '/disabled/{print $1" --revision="$3}' | while read snapname; do sudo snap remove $snapname; done
docker system prune -a --volumes
# Eliminar paquetes innecesarios
sudo apt-get autoremove --purge

# Limpiar el cach√© de apt
sudo apt-get clean

# Eliminar kernels antiguos (mant√©n el actual y uno anterior)
dpkg -l | grep linux-image | awk '{print $2}' | sort -V | sed -n '/'`uname -r`'/q;p' | xargs sudo apt-get -y purge
# Si el uso de swap es bajo (17% en tu caso), podr√≠amos reducirlo
sudo swapoff -a
sudo rm /swapfile
sudo dd if=/dev/zero of=/swapfile bs=1M count=1024  # Crear nuevo swapfile de 1GB
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
# Limpiar logs antiguos
sudo find /var/log -type f -name "*.gz" -delete
sudo find /var/log -type f -name "*.old" -delete
sudo find /var/log -type f -name "*.1" -delete

# Vaciar directorios temporales
sudo rm -rf /var/tmp/*
sudo rm -rf /tmp/*
# Encontrar el proceso padre de los zombies
ps -ef | grep defunct | grep -v grep | awk '{print $3}' | xargs ps -f

# Y luego reiniciar ese proceso padre



curl -X POST "https://graph.facebook.com/v21.0/114521714899382/messages" \
-H "Authorization: Bearer EAAJaOsnq2vgBOxFlPQZBYxWZB2E9isaAkZBt4SfCaLHOeBtJCbyKEfsIWV5qZAF5YElgCyrKbyDa21jXZAeZAHoa9wSILECQQRFVxXZCtxX5bph5CZC2dRbvFCKsMw0stLPIEO9y0S5klCmrZANGcUPTQV6ZB9aUbaNUwGI82lMfTpKHgC9JF45bJCblZBjZB9mznlwfeQZDZD" \
-H "Content-Type: application/json" \
-d '{
      "messaging_product": "whatsapp",
      "to": "525518490291",
      "type": "text",
      "text": {
          "body": "Prueba desde curl"
      }
    }'




@csrf_exempt
async def handle_incoming_message(request):
    """
    Manejo de mensajes entrantes de WhatsApp con mejor manejo de errores y logs detallados.
    """
    try:
        # Obtener configuraci√≥n global
        config = await sync_to_async(lambda: Configuracion.objects.first())()
        if not config:
            logger.error("Configuraci√≥n global no encontrada")
            return JsonResponse({'error': 'Configuraci√≥n no encontrada'}, status=500)

        test_phone_number = config.test_phone_number
        is_test_mode = config.is_test_mode
        default_platform = config.default_platform

        # Decodificar el cuerpo de la solicitud
        try:
            payload = request if isinstance(request, dict) else json.loads(request.body.decode('utf-8'))
            logger.info(f"Payload recibido: {json.dumps(payload, indent=4)}")
        except json.JSONDecodeError as e:
            logger.error("Error al decodificar JSON", exc_info=True)
            return JsonResponse({'error': 'Error al decodificar el JSON'}, status=400)

        # Procesar el payload
        if 'entry' not in payload:
            logger.error("El payload no contiene la clave 'entry'")
            return JsonResponse({'error': "El payload no contiene la clave 'entry'"}, status=400)

        for entry in payload.get('entry', []):
            if 'changes' not in entry:
                logger.warning("La entrada no contiene cambios (changes)")
                continue

            for change in entry.get('changes', []):
                value = change.get('value', {})
                messages = value.get('messages', [])
                if not messages:
                    logger.info("No se encontraron mensajes en el cambio")
                    continue

                for message in messages:
                    sender_id = message.get('from')
                    message_type = message.get('type', 'text')
                    logger.info(f"Mensaje recibido de {sender_id} con tipo {message_type}")

                    # Validar si es un mensaje de prueba
                    if is_test_mode and sender_id == test_phone_number:
                        logger.info("Modo de prueba activado. Mensaje recibido del n√∫mero de prueba.")
                        await send_test_notification(sender_id)
                        continue

                    # Procesar seg√∫n el tipo de mensaje
                    try:
                        if message_type == 'text':
                            message_text = message.get('text', {}).get('body', '')
                            logger.info(f"Mensaje de texto recibido: {message_text}")

                            # Responder con un mensaje de prueba
                            respuesta = f"üëã Hola! Recib√≠ tu mensaje: '{message_text}'. El sistema est√° operativo."
                            from app.integrations.whatsapp import send_whatsapp_message
                            # Obtenemos el phone_id del payload
                            phone_id = payload['entry'][0]['changes'][0]['value']['metadata']['phone_number_id']
                            # Enviamos el mensaje de respuesta
                            await send_whatsapp_message(sender_id, respuesta, phone_id=phone_id)
                            logger.info(f"Mensaje de prueba enviado a {sender_id}")

                        elif message_type == 'image':
                            image_id = message.get('image', {}).get('id')
                            if image_id:
                                await process_media_message('whatsapp', sender_id, image_id, 'image')
                            else:
                                logger.warning("Mensaje de imagen recibido sin 'id'")

                        elif message_type == 'audio':
                            audio_id = message.get('audio', {}).get('id')
                            if audio_id:
                                await process_media_message('whatsapp', sender_id, audio_id, 'audio')
                            else:
                                logger.warning("Mensaje de audio recibido sin 'id'")

                        elif message_type == 'location':
                            location = message.get('location')
                            if location:
                                await process_location_message('whatsapp', sender_id, location)
                            else:
                                logger.warning("Mensaje de ubicaci√≥n recibido sin datos de ubicaci√≥n")

                        else:
                            logger.warning(f"Tipo de mensaje no soportado: {message_type}")

                    except Exception as e:
                        logger.error(f"Error al procesar el mensaje de tipo {message_type}: {e}", exc_info=True)
                        return JsonResponse({'error': f"Error al procesar el mensaje: {e}"}, status=500)

        return JsonResponse({'status': 'success'}, status=200)

    except Exception as e:
        logger.error(f"Error inesperado al manejar la solicitud: {e}", exc_info=True)
        return JsonResponse({'error': f"Error inesperado: {e}"}, status=500)


        sudo rm /home/amigro/app/chatbot.py && sudo nano /home/amigro/app/chatbot.py && sudo systemctl restart gunicorn nginx && sudo truncate -s 0 /home/amigro/logs/*.log