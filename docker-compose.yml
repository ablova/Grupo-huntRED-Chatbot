# ðŸš€ GhuntRED-v2 - Latest Technology Stack
# Ultra-optimized for performance and scalability

version: '3.9'

services:
  # PostgreSQL 16 - Latest with performance optimizations
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ghuntred_v2
      POSTGRES_USER: huntred
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./deployment/postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U huntred -d ghuntred_v2"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 7.2 - Latest with persistence and clustering ready
  redis:
    image: redis:7.2-alpine
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./deployment/redis/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend - Django 5.0 + Python 3.12
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: development
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - static_files:/app/static
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=backend.config.settings.development
      - DATABASE_URL=postgresql://huntred:${DB_PASSWORD}@db:5432/ghuntred_v2
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - WEB_CONCURRENCY=4
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker - Optimized for ML tasks
  celery:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: development
    command: celery -A backend.config.celery worker -l info -E --concurrency=4 --prefetch-multiplier=1
    volumes:
      - ./backend:/app
      - media_files:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=backend.config.settings.development
      - DATABASE_URL=postgresql://huntred:${DB_PASSWORD}@db:5432/ghuntred_v2
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - PYTHONUNBUFFERED=1
      - C_FORCE_ROOT=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2

  # Celery Beat - Scheduled tasks
  celery-beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: development
    command: celery -A backend.config.celery beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_SETTINGS_MODULE=backend.config.settings.development
      - DATABASE_URL=postgresql://huntred:${DB_PASSWORD}@db:5432/ghuntred_v2
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Flower - Task monitoring
  flower:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: development
    command: celery -A backend.config.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - redis

  # Frontend - React 18 + Vite + TypeScript
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_dist:/app/dist
    ports:
      - "3000:3000"
      - "3001:3001"  # Storybook
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
      - VITE_APP_VERSION=${APP_VERSION:-dev}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx - Reverse proxy and static files
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/sites-available:/etc/nginx/sites-available
      - static_files:/var/www/static
      - media_files:/var/www/media
      - frontend_dist:/var/www/frontend
      - ./deployment/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch 8.x - For advanced search and ML analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO - S3-compatible object storage for files and ML models
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-adminpassword}
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Model Server - TensorFlow Serving for production ML models
  ml-server:
    image: tensorflow/serving:2.14.0
    ports:
      - "8501:8501"  # REST API
      - "8500:8500"  # gRPC API
    volumes:
      - ./backend/ml/models:/models
    environment:
      - MODEL_CONFIG_FILE=/models/models.config
    command: --model_config_file=/models/models.config --model_config_file_poll_wait_seconds=60

  # Monitoring - Prometheus + Grafana
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/provisioning:/etc/grafana/provisioning

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  prometheus_data:
  grafana_data:
  media_files:
  static_files:
  frontend_dist:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16