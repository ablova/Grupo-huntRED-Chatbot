# ðŸš€ GhuntRED-v2 - Latest Technology Stack
# Ultra-optimized for performance and scalability

version: '3.8'

services:
  # Main FastAPI Application
  ghuntred-api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: ghuntred-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://ghuntred:huntred2024@postgres:5432/ghuntred_v2
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - SECRET_KEY=ghuntred-super-secret-key-2024
      - DEBUG=False
      - WHATSAPP_VERIFY_TOKEN=ghuntred_whatsapp_verify_2024
      - TELEGRAM_BOT_TOKEN=your_telegram_bot_token
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=noreply@huntred.com
      - SMTP_PASSWORD=your_email_password
    depends_on:
      - postgres
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - ghuntred-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ghuntred-postgres
    environment:
      - POSTGRES_DB=ghuntred_v2
      - POSTGRES_USER=ghuntred
      - POSTGRES_PASSWORD=huntred2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=es_MX.UTF-8 --lc-ctype=es_MX.UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ghuntred-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ghuntred -d ghuntred_v2"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: ghuntred-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - ghuntred-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: ghuntred-celery-worker
    command: celery -A src.tasks.celery_app worker --loglevel=info --concurrency=4 -Q default,payroll,scraping,messaging,notifications
    environment:
      - DATABASE_URL=postgresql://ghuntred:huntred2024@postgres:5432/ghuntred_v2
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - SECRET_KEY=ghuntred-super-secret-key-2024
      - DEBUG=False
    depends_on:
      - postgres
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - ghuntred-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "src.tasks.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Celery Beat Scheduler
  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: ghuntred-celery-beat
    command: celery -A src.tasks.celery_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DATABASE_URL=postgresql://ghuntred:huntred2024@postgres:5432/ghuntred_v2
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - SECRET_KEY=ghuntred-super-secret-key-2024
      - DEBUG=False
    depends_on:
      - postgres
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - ghuntred-network
    restart: unless-stopped

  # Flower - Celery Monitoring
  flower:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: ghuntred-flower
    command: celery -A src.tasks.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - FLOWER_BASIC_AUTH=admin:huntred2024
    depends_on:
      - redis
      - celery-worker
    networks:
      - ghuntred-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ghuntred-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - ghuntred-api
    networks:
      - ghuntred-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ghuntred-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ghuntred-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ghuntred-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=huntred2024
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ghuntred-network
    restart: unless-stopped

  # ElasticSearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: ghuntred-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ghuntred-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: ghuntred-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - KIBANA_SYSTEM_PASSWORD=huntred2024
    depends_on:
      - elasticsearch
    networks:
      - ghuntred-network
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15
    container_name: ghuntred-backup
    environment:
      - PGPASSWORD=huntred2024
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: |
      sh -c '
        chmod +x /backup.sh
        while true; do
          sleep 86400  # Run daily
          /backup.sh
        done
      '
    depends_on:
      - postgres
    networks:
      - ghuntred-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  ghuntred-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16