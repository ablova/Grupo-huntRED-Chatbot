version: '3.8'

services:
  # Servicio de Django
  web:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=ai_huntred.settings.production
      - DB_HOST=db
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - db
      - redis
    ports:
      - "8000:8000"
    restart: unless-stopped
    networks:
      - huntred_network

  # Servicio de Celery Worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A ai_huntred worker -l INFO
    volumes:
      - ./media:/app/media
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=ai_huntred.settings.production
      - DB_HOST=db
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - web
      - db
      - redis
    restart: unless-stopped
    networks:
      - huntred_network

  # Servicio de Celery Beat (programador de tareas)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A ai_huntred beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=ai_huntred.settings.production
      - DB_HOST=db
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - web
      - db
      - redis
    restart: unless-stopped
    networks:
      - huntred_network

  # Servicio de PostgreSQL
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - huntred_network

  # Servicio de Redis (cach√© y broker)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - huntred_network

  # Servicio de Nginx
  nginx:
    image: nginx:1.23-alpine
    volumes:
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - huntred_network

volumes:
  postgres_data:
  redis_data:

networks:
  huntred_network:
    driver: bridge
